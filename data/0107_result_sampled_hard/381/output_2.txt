To implement the RandomizedCollection class, we can use a combination of a list and a dictionary. The list will store the elements in the order they are inserted, and the dictionary will store the indices of each element in the list.

Here's the implementation of the RandomizedCollection class in Python:

```python
import random

class RandomizedCollection:

    def __init__(self):
        self.collection = []
        self.indices = {}

    def insert(self, val: int) -> bool:
        self.collection.append(val)
        if val in self.indices:
            self.indices[val].append(len(self.collection) - 1)
            return False
        else:
            self.indices[val] = [len(self.collection) - 1]
            return True

    def remove(self, val: int) -> bool:
        if val in self.indices:
            last_element = self.collection[-1]
            index_to_remove = self.indices[val].pop()
            if not self.indices[val]:
                del self.indices[val]
            if index_to_remove != len(self.collection) - 1:
                self.collection[index_to_remove] = last_element
                self.indices[last_element].remove(len(self.collection) - 1)
                self.indices[last_element].append(index_to_remove)
            self.collection.pop()
            return True
        else:
            return False

    def getRandom(self) -> int:
        return random.choice(self.collection)
```

Let's test the implementation with the given example:

```python
randomizedCollection = RandomizedCollection()
print(randomizedCollection.insert(1))   # Output: True
print(randomizedCollection.insert(1))   # Output: False
print(randomizedCollection.insert(2))   # Output: True
print(randomizedCollection.getRandom()) # Output: 2 or 1 with equal probability
print(randomizedCollection.remove(1))   # Output: True
print(randomizedCollection.getRandom()) # Output: 1 or 2 with equal probability
```

The output matches the expected results from the example.