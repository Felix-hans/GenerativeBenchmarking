To find the maximum profit that can be achieved by completing at most two transactions, we can use a dynamic programming approach. We'll maintain four variables to track the minimum price, maximum profit, and the profit after the first and second transactions.

Here's the implementation of the `maxProfit` function in Python:

```python
from typing import List

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0

        # Initialize variables
        buy1 = buy2 = float('-inf')
        sell1 = sell2 = 0

        for price in prices:
            # Update the first buy and sell values
            buy1 = max(buy1, -price)
            sell1 = max(sell1, buy1 + price)
            # Update the second buy and sell values
            buy2 = max(buy2, sell1 - price)
            sell2 = max(sell2, buy2 + price)

        return sell2
```

Now, let's test the implementation with the provided examples:

```python
solution = Solution()

# Example 1
prices = [3, 3, 5, 0, 0, 3, 1, 4]
print(solution.maxProfit(prices))  # Output: 6

# Example 2
prices = [1, 2, 3, 4, 5]
print(solution.maxProfit(prices))  # Output: 4

# Example 3
prices = [7, 6, 4, 3, 1]
print(solution.maxProfit(prices))  # Output: 0
```

The output matches the expected results for the given examples.