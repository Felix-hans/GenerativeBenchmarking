To solve this problem, we can use a hash map to store the elements of the array along with their indices. Then, for each element `num` in the array, we can check if the complement (`target - num`) exists in the hash map. If it does, we have found the pair that adds up to the target.

Here's the implementation of the `twoSum` function in Python:

```python
class Solution:
    def twoSum(self, nums, target):
        num_map = {}  # Hash map to store elements and their indices

        for i, num in enumerate(nums):
            complement = target - num
            if complement in num_map:
                return [num_map[complement], i]
            num_map[num] = i  # Store the element in the hash map

        # If no solution is found, return an empty list
        return []
```

You can create an instance of the `Solution` class and call the `twoSum` method with the input array and target value to obtain the indices of the two numbers that add up to the target.

Example usage:

```python
nums = [2, 7, 11, 15]
target = 9
solution = Solution()
result = solution.twoSum(nums, target)
print(result)  # Output: [0, 1]
```

The code will return the indices `[0, 1]` since `nums[0] + nums[1]` equals the target value of 9.