To solve the problem, we can use a hash table to store the complement of each element as we iterate through the array. Here's the Python implementation:

```python
class Solution:
    def twoSum(self, nums, target):
        num_dict = {}  # Hash table to store complement of each number
        
        for i, num in enumerate(nums):
            complement = target - num
            if complement in num_dict:
                return [num_dict[complement], i]  # Return the indices if complement exists in the hash table
            num_dict[num] = i  # Store the number and its index in the hash table
        
        return []  # Return empty list if no solution is found
```

This solution has a time complexity of O(n) since we iterate through the array once and perform constant time operations for each element.