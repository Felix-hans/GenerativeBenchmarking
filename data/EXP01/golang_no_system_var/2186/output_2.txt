To solve this problem, we can follow these steps:

1. Initialize a map `count` to keep track of the frequency of characters in string `s`.
2. Iterate through each character `c` in string `s` and increment its count in the `count` map.
3. Initialize a variable `steps` to 0.
4. Iterate through each character `c` in string `t`.
    - If `c` exists in the `count` map and its count is greater than 0, decrement its count and continue to the next character.
    - Otherwise, increment `steps` by 1.
5. Return `steps`.

Here is the implementation of the `minSteps` function in Go:

```go
func minSteps(s string, t string) int {
    count := make(map[byte]int)

    for i := 0; i < len(s); i++ {
        count[s[i]]++
    }

    steps := 0

    for i := 0; i < len(t); i++ {
        if count[t[i]] > 0 {
            count[t[i]]--
        } else {
            steps++
        }
    }

    return steps
}
```

This solution has a time complexity of O(n), where n is the length of the inputs `s` and `t`, since we iterate through each character of both strings only once.