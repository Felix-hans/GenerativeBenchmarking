To solve this problem, we can count the frequency of each character in both strings using two arrays. We will iterate through each character in both strings and increment the count in the corresponding array. 

Then, we can calculate the number of steps needed to convert one string into the other by comparing the count of each character in the two arrays. 

Here is the implementation in Go:

```go
func minSteps(s string, t string) int {
    // Create two arrays to store the count of characters
    sCount := make([]int, 26)
    tCount := make([]int, 26)
    
    // Count the frequency of characters in the first string
    for i := 0; i < len(s); i++ {
        sCount[s[i]-'a']++
    }
    
    // Count the frequency of characters in the second string
    for i := 0; i < len(t); i++ {
        tCount[t[i]-'a']++
    }
    
    // Calculate the number of steps needed
    steps := 0
    for i := 0; i < 26; i++ {
        if sCount[i] > tCount[i] {
            steps += sCount[i] - tCount[i]
        }
    }
    
    return steps
}
```

The main logic of the solution is in the last `for` loop. We compare the count of each character in the `sCount` and `tCount` arrays. If the count in `sCount` is greater than the count in `tCount`, we need to append additional characters to `t` to make them anagrams. The number of additional characters needed is equal to the difference in counts, so we add that to the `steps` variable.

Finally, we return the total number of steps needed to make `s` and `t` anagrams.