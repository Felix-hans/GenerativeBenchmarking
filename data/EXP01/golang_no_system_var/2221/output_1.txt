Here is the implementation of the "triangularSum" function in Go:

```go
func triangularSum(nums []int) int {
    for len(nums) > 1 {
        newNums := make([]int, len(nums)-1)
        for i := 0; i < len(nums)-1; i++ {
            newNums[i] = (nums[i] + nums[i+1]) % 10
        }
        nums = newNums
    }
    return nums[0]
}
```

Explanation:
1. First, we check if the length of the input array `nums` is greater than 1. If not, we return the only element in `nums` as the triangular sum.
2. If the length of `nums` is greater than 1, we create a new array `newNums` with a length of `len(nums)-1`.
3. Then, we iterate through the elements of `nums` and calculate the values for `newNums` using the given formula `(nums[i] + nums[i+1]) % 10`.
4. Finally, we assign `newNums` to `nums` and repeat the process until `nums` contains only one element.
5. At the end, we return the only element in `nums` as the triangular sum.

The time complexity of this solution is O(n^2), where n is the length of the input array `nums`.