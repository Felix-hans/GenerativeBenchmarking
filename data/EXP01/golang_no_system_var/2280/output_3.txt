To solve this problem, we can iterate through the stockPrices array and check for every two adjacent points if they lie on the same line. If a point does not lie on the same line as the previous point, we increment a counter variable.

Here is the implementation in Go:

```go
func minimumLines(stockPrices [][]int) int {
    if len(stockPrices) <= 1 {
        return len(stockPrices)
    }
    
    lines := 1 // minimum number of lines needed to represent the line chart
    slope := float64(stockPrices[1][1] - stockPrices[0][1]) / float64(stockPrices[1][0] - stockPrices[0][0])

    for i := 2; i < len(stockPrices); i++ {
        newSlope := float64(stockPrices[i][1] - stockPrices[i-1][1]) / float64(stockPrices[i][0] - stockPrices[i-1][0])
        
        if newSlope != slope {
            slope = newSlope
            lines++
        }
    }
    
    return lines
}
```

In this implementation, we first handle the base case where the length of stockPrices is less than or equal to 1, in which case we can directly return the length of stockPrices.

Otherwise, we initialize the number of lines to 1, as we will always need at least one line to represent the line chart.

We then calculate the initial slope between the first two points in the stockPrices array. We use the formula `(y2 - y1) / (x2 - x1)` to calculate the slope.

Next, we iterate through the rest of the stockPrices array starting from the third point. For each point, we calculate the slope between the current point and the previous point using the same formula.

If the new slope is not equal to the previous slope, we increment the lines counter as a new line is needed to connect these two points.

Finally, we return the value of the lines variable, which represents the minimum number of lines needed to represent the line chart.