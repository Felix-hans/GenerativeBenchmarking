To solve the problem, we can use a greedy algorithm. We iterate through each character in the string and check if the current substring has a value less than or equal to k. If it does, we continue appending characters to the current substring. If the value of the current substring exceeds k, we start a new substring. 

Here is the implementation in Go:

```go
func minimumPartition(s string, k int) int {
    count := 0
    value := 0
    for i := 0; i < len(s); i++ {
        digit := int(s[i] - '0') // convert character to integer
        value = value*10 + digit // update the value of the current substring
        
        // check if the value of the current substring is greater than k
        if value > k {
            return -1
        }
        
        // check if we need to start a new substring
        if value != 0 && (i == len(s)-1 || value*10+int(s[i+1]-'0') > k) {
            count++ // increment the count of substrings
            value = 0 // reset the value of the current substring
        }
    }
    return count
}
```

The time complexity of this solution is O(n), where n is the length of the input string. In the worst case, we iterate through each character in the string once.