To solve this task, we need to find the XOR-beauty of the given array `nums`. We can do this by computing the effective values of all possible triplets and taking the XOR of these values.

Here is the implementation in Go:

```go
func xorBeauty(nums []int) int {
    n := len(nums)
    beauty := 0

    for i := 0; i < n; i++ {
        for j := 0; j < n; j++ {
            for k := 0; k < n; k++ {
                effective := (nums[i] | nums[j]) & nums[k]
                beauty ^= effective
            }
        }
    }

    return beauty
}
```

This implementation has a time complexity of O(n^3) since we are iterating over all possible triplets in the nested loops.

Note: The implementation assumes that `nums` is a valid input array with at least one element. No additional error handling is included.