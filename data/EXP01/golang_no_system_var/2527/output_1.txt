To solve the given problem, we can follow these steps:

1. Initialize a variable `result` to 0. This variable will store the xor-beauty of the array.
2. Iterate over all possible triplets of indices i, j, and k, where 0 <= i, j, k < n.
3. Inside the innermost loop, calculate the effective value of the triplet using the bitwise OR and AND operations.
4. Update `result` by performing a bitwise XOR with the effective value.
5. Return the final value of `result`.

Here is the implementation of the `xorBeauty` function in Go:

```go
func xorBeauty(nums []int) int {
    n := len(nums)
    result := 0
    
    for i := 0; i < n; i++ {
        for j := 0; j < n; j++ {
            for k := 0; k < n; k++ {
                effectiveValue := (nums[i] | nums[j]) & nums[k]
                result ^= effectiveValue
            }
        }
    }
    
    return result
}
```

The time complexity of this solution is O(n^3), where n is the length of the input array `nums`.