Here is the implementation of the solution in Go:

```go
import "sort"

func halveArray(nums []int) int {
    // Sort the array in descending order
    sort.Sort(sort.Reverse(sort.IntSlice(nums)))
    
    // Calculate the sum of the initial array
    sum := 0
    for _, num := range nums {
        sum += num
    }
    
    // Calculate the target sum
    target := sum / 2
    
    // Calculate the minimum number of operations
    count := 0
    currentSum := 0
    for _, num := range nums {
        currentSum += num
        count++
        if currentSum >= target {
            break
        }
    }
    
    return count
}
```

The solution first sorts the array in descending order using the `sort.Sort` function from the `sort` package. It then calculates the sum of the initial array using a loop. Next, it calculates the target sum, which is half of the initial sum. Finally, it iterates over the sorted array, keeping track of the current sum and the number of operations. If the current sum becomes equal to or greater than the target sum, the loop is terminated and the number of operations is returned as the result.