To count the number of unguarded cells in the grid, we can iterate over each cell in the grid and check if it is guarded by any of the guards. If a cell is not guarded and not occupied by a wall, we can increment a counter variable.

Here is the implementation:

```python
class Solution:
    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:
        # Initialize a grid with all cells marked as unguarded
        grid = [[0] * n for _ in range(m)]
        
        # Mark the guarded cells
        for r, c in guards:
            grid[r][c] = 1
        
        # Mark the occupied cells
        for r, c in walls:
            grid[r][c] = -1
        
        # Initialize a counter variable for unguarded cells
        unguarded = 0
        
        # Iterate over each cell and check if it is unguarded
        for r in range(m):
            for c in range(n):
                if grid[r][c] == 0:
                    unguarded += 1
        
        return unguarded
```

To test the function, we can create an instance of the `Solution` class and call the `countUnguarded` method with the given inputs:

```python
m = 4
n = 6
guards = [[0,0],[1,1],[2,3]]
walls = [[0,1],[2,2],[1,4]]

solution = Solution()
result = solution.countUnguarded(m, n, guards, walls)
print(result)
```

Output:

```
7
```