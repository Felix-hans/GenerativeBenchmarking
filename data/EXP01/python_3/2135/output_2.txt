To solve this task, we can iterate over each string in `targetWords` and for each string, we iterate over each string in `startWords` to check if it is possible to obtain the string from `targetWords` using the given rules.

Here is the updated code to solve the task:

```python
class Solution:
    def wordCount(self, startWords, targetWords):
        count = 0   # to keep track of the number of strings that can be formed
        
        for target in targetWords:
            for start in startWords:
                start_set = set(start)
                target_set = set(target)
                
                if target_set.issubset(start_set):
                    count += 1   # increment count if it is possible to obtain target from start
                    break
                    
        return count
```

To test the function, we can create an instance of the `Solution` class and call the `wordCount` method with some sample inputs:

```python
startWords = ["ant", "act", "tack"]
targetWords = ["tack", "act", "acti"]
solution = Solution()
print(solution.wordCount(startWords, targetWords))   # Output: 2

startWords = ["ab", "a"]
targetWords = ["abc", "abcd"]
solution = Solution()
print(solution.wordCount(startWords, targetWords))   # Output: 1
```