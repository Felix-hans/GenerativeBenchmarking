```
class Allocator:

    def __init__(self, n: int):
        self.memory = [0] * n
        self.blocks = {}

    def allocate(self, size: int, mID: int) -> int:
        for i in range(len(self.memory) - size + 1):
            if all(mem == 0 for mem in self.memory[i:i+size]):
                for j in range(i, i+size):
                    self.memory[j] = mID
                if mID in self.blocks:
                    self.blocks[mID] += size
                else:
                    self.blocks[mID] = size
                return i
        return -1

    def free(self, mID: int) -> int:
        count = self.blocks.get(mID, 0)
        for i in range(len(self.memory)):
            if self.memory[i] == mID:
                self.memory[i] = 0
        self.blocks.pop(mID, None)
        return count


# Example usage:
if __name__ == "__main__":
    allocator = Allocator(10)
    print(allocator.allocate(1, 1))
    print(allocator.allocate(1, 2))
    print(allocator.allocate(1, 3))
    print(allocator.free(2))
    print(allocator.allocate(3, 4))
    print(allocator.allocate(1, 1))
    print(allocator.allocate(1, 1))
    print(allocator.free(1))
    print(allocator.allocate(10, 2))
    print(allocator.free(7))
```