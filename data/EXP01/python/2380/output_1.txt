To solve this problem, we can iterate through the binary string and count the number of occurrences of "01". We will replace each occurrence with "10" until no more occurrences exist.

Here's the Python code to implement this:

```python
class Solution:
    def secondsToRemoveOccurrences(self, s: str) -> int:
        seconds = 0
        
        while "01" in s:
            s = s.replace("01", "10")
            seconds += 1
        
        return seconds
```

This solution has a time complexity of O(n^2) because the `replace` method has a time complexity of O(n). However, we can optimize this solution to have a time complexity of O(n) by counting the number of occurrences of "01" and adjusting the string accordingly.

Here's the optimized code:

```python
class Solution:
    def secondsToRemoveOccurrences(self, s: str) -> int:
        seconds = 0
        count = 0
        
        for i in range(len(s)):
            if s[i:i+2] == "01":
                count += 1
        
        seconds = count * 2
        
        if count % 2 != 0:
            seconds += 1
        
        return seconds
```

In the optimized code, we count the number of occurrences of "01" and multiply it by 2 because each occurrence can be replaced in 2 seconds. If the count is odd, we add 1 more second to account for the remaining "0"s after all occurrences of "01" are replaced.