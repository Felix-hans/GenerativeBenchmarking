Here's a possible implementation for the task:

```python
from typing import List

class Solution:
    def halveArray(self, nums: List[int]) -> int:
        # Sort the array in descending order
        nums.sort(reverse=True)
        
        total_sum = sum(nums)
        half_sum = total_sum // 2  # Calculate half of the total sum
        current_sum = 0  # Track the sum of the reduced numbers
        
        # Iterate through the array and reduce numbers until the reduced sum is at least half
        num_operations = 0
        for num in nums:
            current_sum += num
            num_operations += 1
            if current_sum >= half_sum:
                break
        
        return num_operations
```

You can create an instance of the `Solution` class and call the `halveArray` method with the input array to get the minimum number of operations to reduce the sum by at least half, as shown below:

```python
nums = [5, 19, 8, 1]
solution = Solution()
result = solution.halveArray(nums)
print(result)  # Output: 3

nums = [3, 8, 20]
result = solution.halveArray(nums)
print(result)  # Output: 3
```