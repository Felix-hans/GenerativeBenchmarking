One possible solution to find the length of the longest alphabetical continuous substring is as follows:

1. Initialize two variables, `maxLength` and `currentLength`, to keep track of the maximum length and the current length of the alphabetical continuous substring respectively. Set both variables to 0.
2. Iterate through the characters in the given string `s` using a loop.
3. For each character, check if it is the next consecutive letter in the alphabet compared to the previous character. If it is, increment the `currentLength` variable by 1.
4. If the current character is not the next consecutive letter, reset the `currentLength` variable to 1.
5. After each iteration, update the `maxLength` variable if the `currentLength` is greater than the `maxLength`.
6. Finally, return the value of `maxLength`.

Here is the implementation of the `longestContinuousSubstring` function:

```python
class Solution:
    def longestContinuousSubstring(self, s: str) -> int:
        maxLength = 0
        currentLength = 1
        for i in range(1, len(s)):
            if ord(s[i]) - ord(s[i-1]) == 1:
                currentLength += 1
            else:
                currentLength = 1
            maxLength = max(maxLength, currentLength)
        return maxLength
```

You can test the functionality of this solution with the given examples:

```python
solution = Solution()
print(solution.longestContinuousSubstring("abacaba")) # Output: 2
print(solution.longestContinuousSubstring("abcde")) # Output: 5
```