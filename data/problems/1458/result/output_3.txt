To solve the task, we can use dynamic programming to find the maximum dot product between non-empty subsequences of `nums1` and `nums2` with the same length.

Here's the implementation of the `maxDotProduct` function in Python:

```python
class Solution:
    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        n1 = len(nums1)
        n2 = len(nums2)
        
        # Create a 2D table to store the maximum dot products
        dp = [[float('-inf')] * (n2 + 1) for _ in range(n1 + 1)]
        
        # Initialize the base cases
        dp[0][0] = 0
        
        # Compute the maximum dot products using dynamic programming
        for i in range(1, n1 + 1):
            for j in range(1, n2 + 1):
                # Calculate the dot product of the current elements
                curr_product = nums1[i - 1] * nums2[j - 1]
                
                # Update the maximum dot product
                dp[i][j] = max(
                    curr_product,                    # Dot product of current elements only
                    dp[i - 1][j - 1] + curr_product,  # Extend the previous subsequences
                    dp[i - 1][j],                    # Ignore current element from nums2
                    dp[i][j - 1]                     # Ignore current element from nums1
                )
        
        # Return the maximum dot product
        return dp[n1][n2]
```

You can create an instance of the `Solution` class and call the `maxDotProduct` method with the given `nums1` and `nums2` arrays to obtain the result:

```python
solution = Solution()
nums1 = [2, 1, -2, 5]
nums2 = [3, 0, -6]
result = solution.maxDotProduct(nums1, nums2)
print(result)  # Output: 18
```

Similarly, you can test the function with the other provided examples or additional test cases.