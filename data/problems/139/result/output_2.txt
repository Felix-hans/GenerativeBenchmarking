To solve the given task, we can use dynamic programming to check if the string `s` can be segmented into words from the `wordDict`. Here's the implementation in Python:

```python
from typing import List

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        n = len(s)
        dp = [False] * (n + 1)  # dp[i] represents if s[:i] can be segmented into words
        
        # Initialize the dp array
        dp[0] = True
        
        for i in range(1, n + 1):
            for j in range(i):
                # Check if s[:j] can be segmented and s[j:i] is in the wordDict
                if dp[j] and s[j:i] in wordDict:
                    dp[i] = True
                    break
        
        return dp[n]
```

You can create an instance of the `Solution` class and call the `wordBreak` method to check if the string `s` can be segmented using the given `wordDict`. Here's an example usage:

```python
s = "leetcode"
wordDict = ["leet", "code"]

solution = Solution()
print(solution.wordBreak(s, wordDict))  # Output: True
```

You can similarly test the other examples by changing the values of `s` and `wordDict`.