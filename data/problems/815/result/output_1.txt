To solve this problem, we can use a breadth-first search (BFS) algorithm. We will build a graph where each bus stop is a node, and there is an edge between two bus stops if there is a bus route that connects them. We will also keep track of the buses that visit each bus stop.

Here's the implementation of the `numBusesToDestination` function:

```python
from collections import deque, defaultdict
from typing import List

class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        if source == target:
            return 0

        # Build the graph and bus stop to bus mapping
        graph = defaultdict(list)
        bus_stops = defaultdict(list)
        for i, route in enumerate(routes):
            for stop in route:
                graph[stop].append(i)
                bus_stops[stop].append(i)

        # Use BFS to find the shortest path
        queue = deque([(source, 0)])
        visited_buses = set()
        visited_stops = set([source])

        while queue:
            stop, buses_taken = queue.popleft()

            if stop == target:
                return buses_taken

            # Explore all buses that visit the current stop
            for bus in bus_stops[stop]:
                if bus not in visited_buses:
                    visited_buses.add(bus)
                    # Visit all the stops on this bus route
                    for next_stop in routes[bus]:
                        if next_stop not in visited_stops:
                            visited_stops.add(next_stop)
                            queue.append((next_stop, buses_taken + 1))

        return -1
```

Let's test the function with the given examples:

```python
routes1 = [[1, 2, 7], [3, 6, 7]]
source1 = 1
target1 = 6
solution = Solution()
print(solution.numBusesToDestination(routes1, source1, target1))
# Output: 2

routes2 = [[7, 12], [4, 5, 15], [6], [15, 19], [9, 12, 13]]
source2 = 15
target2 = 12
print(solution.numBusesToDestination(routes2, source2, target2))
# Output: -1
```

The function returns the expected outputs for the given examples.