The problem you described can be solved using dynamic programming. Here's the implementation of the `climbStairs` method in Python:

```python
class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1:
            return 1
        
        # Create a list to store the number of ways to climb each step
        dp = [0] * (n + 1)
        
        # Base cases
        dp[1] = 1  # There's only one way to climb 1 step
        dp[2] = 2  # There are two ways to climb 2 steps (1 step + 1 step or 2 steps)
        
        # Iterate from the third step up to the target step
        for i in range(3, n + 1):
            # The number of ways to climb the current step is the sum of the ways to climb the previous two steps
            dp[i] = dp[i - 1] + dp[i - 2]
        
        return dp[n]
```

You can create an instance of the `Solution` class and call the `climbStairs` method with the desired value of `n` to get the number of distinct ways to climb to the top.

Example usage:

```python
solution = Solution()
print(solution.climbStairs(2))  # Output: 2
print(solution.climbStairs(3))  # Output: 3
```

Note: The solution uses dynamic programming with a bottom-up approach, starting from the base cases and gradually building up to the target step. This approach avoids unnecessary recursion and computes the solution efficiently.