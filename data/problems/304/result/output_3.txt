To implement the `NumMatrix` class and the `sumRegion` method, we can follow the given approach:

1. Initialize the `NumMatrix` class by storing the input matrix.
2. Create a 2D prefix sum matrix, `prefixSum`, where each element represents the sum of the values from (0, 0) to (i, j) in the original matrix.
   - `prefixSum[i][j] = matrix[i][j] + prefixSum[i-1][j] + prefixSum[i][j-1] - prefixSum[i-1][j-1]`
   - This prefix sum matrix allows us to calculate the sum of any subrectangle in O(1) time complexity.
3. In the `sumRegion` method, calculate the sum of the subrectangle using the prefix sum matrix.
   - Calculate the sum of the entire rectangle from (0, 0) to (row2, col2) using `prefixSum[row2][col2]`.
   - Subtract the sum of the rectangle from (0, 0) to (row1-1, col2) using `prefixSum[row1-1][col2]`.
   - Subtract the sum of the rectangle from (0, 0) to (row2, col1-1) using `prefixSum[row2][col1-1]`.
   - Add the sum of the rectangle from (0, 0) to (row1-1, col1-1) using `prefixSum[row1-1][col1-1]`.
   - Return the calculated sum.

Here's the Python implementation of the `NumMatrix` class:

```python
class NumMatrix:
    def __init__(self, matrix: List[List[int]]):
        if not matrix or not matrix[0]:
            self.prefixSum = None
        else:
            m, n = len(matrix), len(matrix[0])
            self.prefixSum = [[0] * (n + 1) for _ in range(m + 1)]
            
            for i in range(1, m + 1):
                for j in range(1, n + 1):
                    self.prefixSum[i][j] = (
                        matrix[i-1][j-1]
                        + self.prefixSum[i-1][j]
                        + self.prefixSum[i][j-1]
                        - self.prefixSum[i-1][j-1]
                    )

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        if self.prefixSum is None:
            return 0

        return (
            self.prefixSum[row2+1][col2+1]
            - self.prefixSum[row1][col2+1]
            - self.prefixSum[row2+1][col1]
            + self.prefixSum[row1][col1]
        )
```

You can now create a `NumMatrix` object, initialize it with the matrix, and call the `sumRegion` method to get the sum of the desired subrectangle. Here's an example usage:

```python
matrix = [
    [3, 0, 1, 4, 2],
    [5, 6, 3, 2, 1],
    [1, 2, 0, 1, 5],
    [4, 1, 0, 1, 7],
    [1, 0, 3, 0, 5]
]

obj = NumMatrix(matrix)

print(obj.sumRegion(2, 1, 4, 3))  # Output: 8
print(obj.sum