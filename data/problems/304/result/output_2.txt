To implement the `NumMatrix` class and handle the `sumRegion` queries, you can use a pre-computation approach called "prefix sum." The idea is to calculate the cumulative sum of the matrix elements up to each position and store it in a separate matrix. Then, to calculate the sum of a region, you can use the precomputed sums to obtain the result in constant time.

Here's the Python implementation for the `NumMatrix` class:

```python
class NumMatrix:
    def __init__(self, matrix):
        if not matrix:
            return

        m, n = len(matrix), len(matrix[0])
        self.prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                self.prefix_sum[i][j] = (
                    self.prefix_sum[i - 1][j]
                    + self.prefix_sum[i][j - 1]
                    - self.prefix_sum[i - 1][j - 1]
                    + matrix[i - 1][j - 1]
                )

    def sumRegion(self, row1, col1, row2, col2):
        return (
            self.prefix_sum[row2 + 1][col2 + 1]
            - self.prefix_sum[row1][col2 + 1]
            - self.prefix_sum[row2 + 1][col1]
            + self.prefix_sum[row1][col1]
        )
```

You can then create a `NumMatrix` object, passing the initial matrix, and call the `sumRegion` method to get the sum for each query.

Here's an example usage with the provided test case:

```python
matrix = [
    [3, 0, 1, 4, 2],
    [5, 6, 3, 2, 1],
    [1, 2, 0, 1, 5],
    [4, 1, 0, 1, 7],
    [1, 0, 3, 0, 5]
]

obj = NumMatrix(matrix)
print(obj.sumRegion(2, 1, 4, 3))  # Output: 8
print(obj.sumRegion(1, 1, 2, 2))  # Output: 11
print(obj.sumRegion(1, 2, 2, 4))  # Output: 12
```

The `sumRegion` method returns the sum of the elements inside the specified rectangle, and it runs in constant time complexity O(1).