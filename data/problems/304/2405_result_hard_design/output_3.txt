To implement the NumMatrix class and achieve O(1) time complexity for the `sumRegion` operation, we can use the concept of cumulative sums.

Here's the Python implementation:

```python
class NumMatrix:

    def __init__(self, matrix):
        if not matrix or not matrix[0]:
            self.cumulative_sums = None
        else:
            rows, cols = len(matrix), len(matrix[0])
            self.cumulative_sums = [[0] * (cols + 1) for _ in range(rows + 1)]

            for i in range(1, rows + 1):
                for j in range(1, cols + 1):
                    self.cumulative_sums[i][j] = (
                        matrix[i - 1][j - 1]
                        + self.cumulative_sums[i - 1][j]
                        + self.cumulative_sums[i][j - 1]
                        - self.cumulative_sums[i - 1][j - 1]
                    )

    def sumRegion(self, row1, col1, row2, col2):
        if self.cumulative_sums is None:
            return 0

        return (
            self.cumulative_sums[row2 + 1][col2 + 1]
            - self.cumulative_sums[row1][col2 + 1]
            - self.cumulative_sums[row2 + 1][col1]
            + self.cumulative_sums[row1][col1]
        )
```

In the `__init__` method, we initialize a 2D `cumulative_sums` matrix. Each cell in `cumulative_sums` represents the sum of the submatrix from (0, 0) to (i-1, j-1) in the original `matrix`. We compute these cumulative sums using dynamic programming.

In the `sumRegion` method, we use the cumulative sums to calculate the sum of the submatrix specified by the given coordinates. We subtract the unnecessary regions to obtain the desired sum.

Here's an example usage:

```python
matrix = [
    [3, 0, 1, 4, 2],
    [5, 6, 3, 2, 1],
    [1, 2, 0, 1, 5],
    [4, 1, 0, 1, 7],
    [1, 0, 3, 0, 5]
]

obj = NumMatrix(matrix)
print(obj.sumRegion(2, 1, 4, 3))  # Output: 8
print(obj.sumRegion(1, 1, 2, 2))  # Output: 11
print(obj.sumRegion(1, 2, 2, 4))  # Output: 12
```

The `sumRegion` calls return the expected sums based on the given example.