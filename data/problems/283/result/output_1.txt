To move all zeros to the end of the array while maintaining the relative order of non-zero elements, you can use the following approach:

1. Initialize a variable `zero_index` to keep track of the position where the next non-zero element should be placed.
2. Iterate through the array `nums`.
3. If the current element is non-zero, swap it with the element at the `zero_index` position and increment `zero_index` by 1.
4. After the iteration, all non-zero elements will be placed at the beginning of the array, and `zero_index` will point to the position where the first zero should be placed.
5. Iterate from `zero_index` to the end of the array and set all elements to zero.

Here's the implementation of the `moveZeroes` function:

```python
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        zero_index = 0

        # Move all non-zero elements to the front
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[i], nums[zero_index] = nums[zero_index], nums[i]
                zero_index += 1

        # Set remaining elements to zero
        for i in range(zero_index, len(nums)):
            nums[i] = 0
```

This solution has a time complexity of O(n), where n is the length of the array `nums`. It only requires a constant amount of additional space, making the modifications in-place.