To solve the given task in Python, you can use a simple iterative approach. Here's an implementation of the `numWaterBottles` function:

```python
class Solution:
    def numWaterBottles(self, numBottles: int, numExchange: int) -> int:
        total_bottles = numBottles  # Total bottles initially
        empty_bottles = numBottles  # Empty bottles initially

        while empty_bottles >= numExchange:
            # Calculate the number of full bottles obtained from exchanging empty bottles
            full_bottles = empty_bottles // numExchange
            
            # Update the total number of bottles
            total_bottles += full_bottles
            
            # Calculate the remaining empty bottles after exchanging
            empty_bottles = empty_bottles % numExchange + full_bottles

        return total_bottles
```

In this solution, we start with the given `numBottles` as both the total bottles and the empty bottles. We continue the loop as long as we have enough empty bottles to make an exchange (`empty_bottles >= numExchange`). Inside the loop, we calculate the number of full bottles obtained from exchanging the empty bottles and update the total number of bottles. We also update the number of remaining empty bottles after the exchange.

Finally, we return the `total_bottles`, which represents the maximum number of water bottles that can be drunk.

You can create an instance of the `Solution` class and call the `numWaterBottles` method with the given inputs:

```python
solution = Solution()
numBottles = 9
numExchange = 3
result = solution.numWaterBottles(numBottles, numExchange)
print(result)  # Output: 13
```

```python
solution = Solution()
numBottles = 15
numExchange = 4
result = solution.numWaterBottles(numBottles, numExchange)
print(result)  # Output: 19
```

The code above will produce the expected outputs for the given examples.