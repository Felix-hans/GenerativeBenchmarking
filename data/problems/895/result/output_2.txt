To design a stack-like data structure that pushes elements onto the stack and pops the most frequent element, we can use a combination of a dictionary and a list. The dictionary will store the frequency of each element in the stack, and the list will represent the stack itself.

Here's the implementation of the `FreqStack` class:

```python
class FreqStack:

    def __init__(self):
        self.freq = {}  # Dictionary to store the frequency of elements
        self.stack = []  # List to represent the stack

    def push(self, val: int) -> None:
        if val in self.freq:
            self.freq[val] += 1
        else:
            self.freq[val] = 1
        self.stack.append(val)

    def pop(self) -> int:
        max_freq = max(self.freq.values())  # Find the maximum frequency
        max_freq_elements = []
        for key, value in self.freq.items():
            if value == max_freq:
                max_freq_elements.append(key)
        for i in range(len(self.stack) - 1, -1, -1):
            if self.stack[i] in max_freq_elements:
                element = self.stack.pop(i)
                self.freq[element] -= 1
                if self.freq[element] == 0:
                    del self.freq[element]
                return element

# Testing the implementation
freqStack = FreqStack()
freqStack.push(5)
freqStack.push(7)
freqStack.push(5)
freqStack.push(7)
freqStack.push(4)
freqStack.push(5)
print(freqStack.pop())  # Output: 5
print(freqStack.pop())  # Output: 7
print(freqStack.pop())  # Output: 5
print(freqStack.pop())  # Output: 4
```

In the implementation, the `push` method adds the element to the stack and updates its frequency in the dictionary. The `pop` method finds the element(s) with the maximum frequency and searches for the closest occurrence to the top of the stack. It then removes that element from the stack and updates its frequency accordingly. Finally, the element is returned as the result of the `pop` operation.

Running the provided example, the output will be `[5, 7, 5, 4]`, which matches the expected output.