To solve this task, we can use a dynamic programming approach. We'll create an array to store the Tribonacci numbers up to the given input `n`. We'll start by initializing the array with the first three numbers `[0, 1, 1]`.

Then, we'll iterate from `3` to `n`, and for each index `i`, we'll calculate `T[i]` by summing up the previous three numbers `T[i-3]`, `T[i-2]`, and `T[i-1]`.

Finally, we'll return the value of `T[n]`.

Here's the implementation of the `tribonacci` function:

```python
class Solution:
    def tribonacci(self, n: int) -> int:
        if n == 0:
            return 0
        elif n <= 2:
            return 1
        
        tribonacci_nums = [0] * (n + 1)
        tribonacci_nums[0] = 0
        tribonacci_nums[1] = 1
        tribonacci_nums[2] = 1
        
        for i in range(3, n + 1):
            tribonacci_nums[i] = tribonacci_nums[i - 3] + tribonacci_nums[i - 2] + tribonacci_nums[i - 1]
        
        return tribonacci_nums[n]
```

Let's test the function with the provided examples:

```python
solution = Solution()

print(solution.tribonacci(4))  # Output: 4
print(solution.tribonacci(25))  # Output: 1389537
```

The function should return the expected outputs.