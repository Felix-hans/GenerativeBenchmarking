To solve this task, we can use a greedy approach. We need to count the number of 'a' characters that appear after each 'b' character. Then, we can calculate the minimum number of deletions needed by summing up the counts.

Here's the implementation of the `minimumDeletions` function in Python:

```python
class Solution:
    def minimumDeletions(self, s: str) -> int:
        deletions = 0  # Variable to store the number of deletions needed
        a_count = 0  # Variable to count 'a' characters
        
        # Iterate over each character in the string
        for char in s:
            if char == 'a':
                # If the character is 'a', increment the count of 'a' characters
                a_count += 1
            else:
                # If the character is 'b', we have two choices:
                # 1. Delete the 'b' character, which doesn't affect the balance
                # 2. Delete the previously counted 'a' characters
                #    (since they appear after the 'b' character)
                # We choose the minimum of the two options and update the deletions count.
                deletions += min(1, a_count)
        
        return deletions
```

Now, we can create an instance of the `Solution` class and test the function with the provided examples:

```python
solution = Solution()

s1 = "aababbab"
print(solution.minimumDeletions(s1))  # Output: 2

s2 = "bbaaaaabb"
print(solution.minimumDeletions(s2))  # Output: 2
```

The function should produce the expected outputs for the given examples.