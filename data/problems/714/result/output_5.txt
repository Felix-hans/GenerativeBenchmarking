To solve this problem, we can use a dynamic programming approach. Let's define two variables, `cash` and `hold`, which represent the maximum profit we can have when we don't hold any stock and when we hold a stock, respectively.

We can iterate through the prices array, updating the `cash` and `hold` variables based on the following conditions:

1. If we don't hold any stock on day i, the maximum profit is either the same as the previous day (`cash[i-1]`) or the profit we get from selling the stock we held on the previous day (`hold[i-1] + prices[i] - fee`).

2. If we hold a stock on day i, the maximum profit is either the same as the previous day (`hold[i-1]`) or the profit we get from buying a stock on the previous day (`cash[i-1] - prices[i]`).

After iterating through all the prices, the maximum profit can be found in the `cash` variable.

Here's the implementation of the `maxProfit` function in Python:

```python
from typing import List

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        n = len(prices)
        cash = 0
        hold = -prices[0]

        for i in range(1, n):
            cash = max(cash, hold + prices[i] - fee)
            hold = max(hold, cash - prices[i])

        return cash
```

Let's test the solution with the given examples:

```python
solution = Solution()

# Example 1
prices = [1, 3, 2, 8, 4, 9]
fee = 2
print(solution.maxProfit(prices, fee))  # Output: 8

# Example 2
prices = [1, 3, 7, 5, 10, 3]
fee = 3
print(solution.maxProfit(prices, fee))  # Output: 6
```

The output matches the expected results.