To solve the task, we can follow these steps:

1. Define a helper function to find the greatest common divisor (GCD) of two numbers. We'll use Euclid's algorithm to calculate the GCD.

2. Define the `fractionAddition` function that takes the expression as input.

3. Initialize `numerator` and `denominator` variables to 0.

4. Split the expression using the '+' and '-' signs to get the individual fractions.

5. Iterate over each fraction obtained from the split.

6. Split the fraction using the '/' sign to get the numerator and denominator.

7. Convert the numerator and denominator to integers.

8. Update `numerator` and `denominator` based on the operation (+/-) and the current fraction.

9. After processing all fractions, calculate the GCD of `numerator` and `denominator`.

10. Divide both `numerator` and `denominator` by their GCD to simplify the fraction.

11. Return the simplified fraction as a string in the format "numerator/denominator".

Here's the implementation of the `Solution` class in Python:

```python
class Solution:
    def gcd(self, a, b):
        while b:
            a, b = b, a % b
        return a

    def fractionAddition(self, expression: str) -> str:
        numerator = 0
        denominator = 1

        fractions = expression.split('+')
        for fraction in fractions:
            if '-' in fraction:
                num, denom = fraction.split('-')
                sign = -1
            else:
                num, denom = fraction.split('+')
                sign = 1

            num = int(num)
            denom = int(denom)
            numerator = numerator * denom + sign * num * denominator
            denominator *= denom

        gcd = self.gcd(abs(numerator), denominator)
        numerator //= gcd
        denominator //= gcd

        return str(numerator) + '/' + str(denominator)
```

Now you can create an instance of the `Solution` class and call the `fractionAddition` method with the input expression to get the result in string format.