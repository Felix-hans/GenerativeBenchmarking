To solve this problem, we can simulate the pouring process and track the amount of champagne in each glass. We'll start with a 2D array to represent the pyramid of glasses and initialize all the glasses with 0 champagne. Then, we'll pour the champagne starting from the top glass and distribute the excess equally to the glasses below.

Here's the implementation of the `champagneTower` function:

```python
class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        # Initialize the pyramid of glasses
        glasses = [[0] * i for i in range(1, query_row + 2)]
        glasses[0][0] = poured

        # Simulate the pouring process
        for row in range(query_row + 1):
            for glass in range(row + 1):
                if glasses[row][glass] >= 1:
                    excess = glasses[row][glass] - 1
                    glasses[row][glass] = 1
                    if row + 1 < query_row + 1:
                        glasses[row + 1][glass] += excess / 2
                        glasses[row + 1][glass + 1] += excess / 2

        return min(1, glasses[query_row][query_glass])
```

Let's test the function with the given examples:

```python
solution = Solution()

# Example 1
poured = 1
query_row = 1
query_glass = 1
print(solution.champagneTower(poured, query_row, query_glass))
# Output: 0.0

# Example 2
poured = 2
query_row = 1
query_glass = 1
print(solution.champagneTower(poured, query_row, query_glass))
# Output: 0.5

# Example 3
poured = 100000009
query_row = 33
query_glass = 17
print(solution.champagneTower(poured, query_row, query_glass))
# Output: 1.0
```

The function correctly calculates the amount of champagne in the specified glass.