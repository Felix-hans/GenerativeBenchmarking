To solve the given task, we can use a backtracking approach. We will iterate through each cell on the board and perform a depth-first search (DFS) to check if a word can be formed starting from that cell.

Here's the implementation of the `findWords` function in Python:

```python
from typing import List

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        # Convert the list of words into a set for efficient lookup
        words_set = set(words)

        # Define the directions for horizontal and vertical movement
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]

        def dfs(row, col, word, visited):
            # Check if the word is found
            if word in words_set:
                result.append(word)
                words_set.remove(word)  # Remove the word to avoid duplicates

            # Mark the current cell as visited
            visited[row][col] = True

            # Explore all the adjacent cells
            for dx, dy in directions:
                new_row, new_col = row + dx, col + dy
                if (
                    0 <= new_row < len(board) and
                    0 <= new_col < len(board[0]) and
                    not visited[new_row][new_col] and
                    board[new_row][new_col] in word
                ):
                    dfs(new_row, new_col, word + board[new_row][new_col], visited)

            # Mark the current cell as unvisited (backtrack)
            visited[row][col] = False

        result = []
        visited = [[False] * len(board[0]) for _ in range(len(board))]

        # Start DFS from each cell
        for i in range(len(board)):
            for j in range(len(board[0])):
                dfs(i, j, board[i][j], visited)

        return result
```

You can create an instance of the `Solution` class and call the `findWords` method with the board and words as input to obtain the desired output.

```python
solution = Solution()
board = [
    ["o", "a", "a", "n"],
    ["e", "t", "a", "e"],
    ["i", "h", "k", "r"],
    ["i", "f", "l", "v"]
]
words = ["oath", "pea", "eat", "rain"]
output = solution.findWords(board, words)
print(output)
```

The output for the given example would be `["eat", "oath"]`.