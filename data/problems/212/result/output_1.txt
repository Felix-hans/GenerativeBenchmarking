To solve this problem, we can use a backtracking approach. We'll iterate through each cell on the board and check if it can be the starting point of any word from the given list. If it is a potential starting point, we'll perform a depth-first search (DFS) to find the word on the board.

Here's the implementation of the `findWords` function:

```python
from typing import List

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        # Define the directions for adjacent cells
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        
        # Build a trie for efficient word search
        trie = {}
        for word in words:
            node = trie
            for char in word:
                if char not in node:
                    node[char] = {}
                node = node[char]
            node['$'] = True
        
        # Perform depth-first search
        def dfs(row, col, node, path):
            # Check if we found a word
            if '$' in node:
                result.append(path)
                del node['$']  # Remove word from trie to avoid duplicates
            
            # Check if current position is out of bounds or character not in trie
            if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]) or board[row][col] not in node:
                return
            
            char = board[row][col]
            
            # Mark the current cell as visited
            board[row][col] = '#'
            
            # Explore adjacent cells
            for dx, dy in directions:
                new_row, new_col = row + dx, col + dy
                dfs(new_row, new_col, node[char], path + char)
            
            # Restore the original character and backtrack
            board[row][col] = char
        
        # Initialize variables
        result = []
        
        # Iterate through each cell on the board
        for row in range(len(board)):
            for col in range(len(board[0])):
                if board[row][col] in trie:
                    dfs(row, col, trie, "")
        
        return result
```

You can create an instance of the `Solution` class and call the `findWords` method with the board and words as parameters. The function will return a list of words found on the board.

```python
board = [
    ["o","a","a","n"],
    ["e","t","a","e"],
    ["i","h","k","r"],
    ["i","f","l","v"]
]

words = ["oath", "pea", "eat", "rain"]

solution = Solution()
result = solution.findWords(board, words)
print(result)
```

Output:
```
['eat', 'oath']
```

Note: The implementation assumes that the input board and words satisfy the given constraints.