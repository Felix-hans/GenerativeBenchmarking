You are given an array of network towers towers, where towers[i] = [xi, yi,
qi] denotes the i^th network tower with location (xi, yi) and quality factor
qi. All the coordinates are integral coordinates on the X-Y plane, and the
distance between the two coordinates is the Euclidean distance.

You are also given an integer radius where a tower is reachable if the
distance is less than or equal to radius. Outside that distance, the signal
becomes garbled, and the tower is not reachable.

The signal quality of the i^th tower at a coordinate (x, y) is calculated
with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower
and the coordinate. The network quality at a coordinate is the sum of the
signal qualities from all the reachable towers.

Return the array [cx, cy] representing the integral coordinate (cx, cy) where
the network quality is maximum. If there are multiple coordinates with the
same network quality, return the lexicographically minimum non-negative
coordinate.

Note:


A coordinate (x1, y1) is lexicographically smaller than (x2, y2) if
either:


x1 < x2, or
x1 == x2 and y1 < y2.


⌊val⌋ is the greatest integer less than or equal to val (the floor
function).



Example 1:


Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2
Output: [2,1]
Explanation: At coordinate (2, 1) the total quality is 13.
- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7
- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2
- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4
No other coordinate has a higher network quality.

Example 2:


Input: towers = [[23,11,21]], radius = 9
Output: [23,11]
Explanation: Since there is only one tower, the network quality is highest
right at the tower's location.


Example 3:


Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2
Output: [1,2]
Explanation: Coordinate (1, 2) has the highest network quality.



Constraints:


1 <= towers.length <= 50
towers[i].length == 3
0 <= xi, yi, qi <= 50
1 <= radius <= 50





```
class Solution:
    def bestCoordinate(self, towers: List[List[int]], radius: int) -> List[int]:
```Implement the above task in Python. coordinates of a tower and a target coordinate, and calculates the signal quality based on the given formula.
2. Initialize variables `max_quality` and `best_coordinate` to keep track of the maximum network quality and its corresponding coordinate.
3. Iterate through all possible coordinates within the given radius. We can use nested loops to generate the coordinates.
4. For each coordinate, iterate through all the towers and calculate the signal quality using the `calculate_quality` function. Add up the signal qualities from all reachable towers to get the network quality at the coordinate.
5. Update `max_quality` and `best_coordinate` if the current network quality is greater than the maximum quality so far or if it's equal but the coordinate is lexicographically smaller.
6. Return the `best_coordinate` as the result.

Here's the implementation of the `bestCoordinate` method:

```python
import math
from typing import List

class Solution:
    def bestCoordinate(self, towers: List[List[int]], radius: int) -> List[int]:
        def calculate_quality(tower, coord):
            x, y, q = tower
            d = math.sqrt((x - coord[0])**2 + (y - coord[1])**2)
            return q // (1 + d)

        max_quality = 0
        best_coordinate = [0, 0]

        for x in range(51):
            for y in range(51):
                network_quality = 0
                for tower in towers:
                    if math.sqrt((tower[0] - x)**2 + (tower[1] - y)**2) <= radius:
                        network_quality += calculate_quality(tower, (x, y))

                if network_quality > max_quality:
                    max_quality = network_quality
                    best_coordinate = [x, y]
                elif network_quality == max_quality and (x < best_coordinate[0] or (x == best_coordinate[0] and y < best_coordinate[1])):
                    best_coordinate = [x, y]

        return best_coordinate
```

You can now create an instance of the `Solution` class and call the `bestCoordinate` method with the given towers and radius to obtain the desired result.