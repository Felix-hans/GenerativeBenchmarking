Here's an implementation of the `MedianFinder` class in Python:

```python
import heapq

class MedianFinder:

    def __init__(self):
        # Initialize two heaps: one for smaller half of the numbers (max heap)
        # and one for larger half of the numbers (min heap).
        self.small_heap = []  # max heap
        self.large_heap = []  # min heap

    def addNum(self, num: int) -> None:
        # Add the number to the appropriate heap.
        # If the number is smaller than the largest number in the small_heap,
        # it belongs to the smaller half. Otherwise, it belongs to the larger half.
        if not self.small_heap or num < -self.small_heap[0]:
            heapq.heappush(self.small_heap, -num)
        else:
            heapq.heappush(self.large_heap, num)

        # Balance the heaps by moving the largest element from the small_heap
        # to the large_heap if the sizes are different by more than 1.
        if len(self.small_heap) - len(self.large_heap) > 1:
            heapq.heappush(self.large_heap, -heapq.heappop(self.small_heap))
        elif len(self.large_heap) - len(self.small_heap) > 1:
            heapq.heappush(self.small_heap, -heapq.heappop(self.large_heap))

    def findMedian(self) -> float:
        # Check the sizes of the heaps to determine the median calculation.
        if len(self.small_heap) == len(self.large_heap):
            # If the sizes are equal, the median is the average of the top elements
            # of both heaps (negating the value from the small_heap).
            return (-self.small_heap[0] + self.large_heap[0]) / 2
        elif len(self.small_heap) > len(self.large_heap):
            # If the small_heap has more elements, the median is the top element of the small_heap.
            return -self.small_heap[0]
        else:
            # If the large_heap has more elements, the median is the top element of the large_heap.
            return self.large_heap[0]
```

You can create an instance of `MedianFinder` and call the `addNum` and `findMedian` methods as shown in the example:

```python
obj = MedianFinder()
obj.addNum(1)
obj.addNum(2)
print(obj.findMedian())  # Output: 1.5
obj.addNum(3)
print(obj.findMedian())  # Output: 2.0
```

This implementation maintains two heaps to efficiently find the median in constant time complexity. The `addNum` method inserts the number into the appropriate heap and balances the heaps if necessary. The `findMedian` method calculates and returns the median based on the sizes of the heaps.