To solve this problem, we can iterate over each pair of points in the given array and calculate the slope between them. We can use a dictionary to keep track of the number of points that have the same slope with respect to a reference point. The maximum number of points that lie on the same line will be the maximum value in the dictionary.

Here's the implementation of the `maxPoints` function in Python:

```python
from typing import List

class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        if len(points) < 3:
            return len(points)
        
        max_points = 0
        
        for i in range(len(points)):
            slopes = {}
            same_points = 1  # Count the same point
            
            for j in range(i + 1, len(points)):
                x1, y1 = points[i]
                x2, y2 = points[j]
                
                if x1 == x2 and y1 == y2:
                    same_points += 1
                    continue
                
                if x1 == x2:  # Vertical line
                    slope = float('inf')
                else:
                    slope = (y2 - y1) / (x2 - x1)
                
                if slope not in slopes:
                    slopes[slope] = 1
                else:
                    slopes[slope] += 1
            
            max_points = max(max_points, same_points)
            if slopes:
                max_points = max(max_points, max(slopes.values()) + same_points)
        
        return max_points
```

You can create an instance of the `Solution` class and call the `maxPoints` method, passing the `points` array as the argument to find the maximum number of points that lie on the same straight line.

Example usage:

```python
solution = Solution()
points = [[1, 1], [2, 2], [3, 3]]
result = solution.maxPoints(points)
print(result)  # Output: 3

points = [[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]]
result = solution.maxPoints(points)
print(result)  # Output: 4
```

Note: The code assumes that the `Solution` class is defined and imported properly.