To solve this problem, we can iterate over each pair of points and calculate the slope of the line formed by those two points. If two points have the same slope, it means they are on the same line. We can keep track of the maximum number of points on the same line using a dictionary.

Here's the implementation of the `maxPoints` function in Python:

```python
from typing import List

class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        if len(points) < 3:
            return len(points)

        max_points = 0
        for i in range(len(points)):
            slopes = {}  # Dictionary to store the count of points with the same slope
            duplicates = 1  # Count of duplicate points

            for j in range(len(points)):
                if i == j:
                    continue

                x1, y1 = points[i]
                x2, y2 = points[j]

                if x1 == x2 and y1 == y2:
                    duplicates += 1
                elif x1 == x2:
                    slope = float('inf')  # Vertical line, slope is infinity
                    slopes[slope] = slopes.get(slope, 0) + 1
                else:
                    slope = (y2 - y1) / (x2 - x1)
                    slopes[slope] = slopes.get(slope, 0) + 1

            # Update the maximum number of points on the same line
            max_points = max(max_points, duplicates + max(slopes.values(), default=0))

        return max_points
```

You can create an instance of the `Solution` class and call the `maxPoints` method, passing the `points` list as an argument, to get the maximum number of points that lie on the same straight line.

```python
solution = Solution()
points = [[1, 1], [2, 2], [3, 3]]
print(solution.maxPoints(points))  # Output: 3

points = [[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]]
print(solution.maxPoints(points))  # Output: 4
```

Note: This solution has a time complexity of O(n^2), where n is the number of points in the input list.