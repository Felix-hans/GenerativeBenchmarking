To solve this problem, we can use a nested loop to iterate through each pair of points and calculate the slope of the line connecting them. We'll store the frequency of each slope in a dictionary and keep track of the maximum count.

Here's the implementation of the `maxPoints` function in Python:

```python
from typing import List

class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        if len(points) < 3:
            return len(points)

        max_points = 0

        for i in range(len(points)):
            slopes = {}
            duplicate = 1
            for j in range(i + 1, len(points)):
                x1, y1 = points[i]
                x2, y2 = points[j]

                if x1 == x2 and y1 == y2:
                    duplicate += 1
                    continue

                if x1 == x2:
                    slope = float('inf')
                else:
                    slope = (y2 - y1) / (x2 - x1)

                if slope not in slopes:
                    slopes[slope] = 1
                else:
                    slopes[slope] += 1

            current_max = duplicate
            if slopes:
                current_max = max(current_max, max(slopes.values()) + duplicate)

            max_points = max(max_points, current_max)

        return max_points
```

You can create an instance of the `Solution` class and call the `maxPoints` method, passing in the `points` array as the argument. The function will return the maximum number of points that lie on the same straight line.

Here's an example usage:

```python
solution = Solution()
points = [[1, 1], [2, 2], [3, 3]]
result = solution.maxPoints(points)
print(result)  # Output: 3
```

```python
solution = Solution()
points = [[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]]
result = solution.maxPoints(points)
print(result)  # Output: 4
```

Note that the `maxPoints` function is defined within the `Solution` class, so we create an instance of the class and call the method on that instance.