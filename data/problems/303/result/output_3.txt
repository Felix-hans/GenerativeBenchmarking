To implement the NumArray class and its methods in Python, you can use the following code:

```python
class NumArray:
    def __init__(self, nums):
        self.nums = nums
        self.prefix_sum = self.calculate_prefix_sum()

    def calculate_prefix_sum(self):
        prefix_sum = [0] * (len(self.nums) + 1)
        for i in range(1, len(self.nums) + 1):
            prefix_sum[i] = prefix_sum[i - 1] + self.nums[i - 1]
        return prefix_sum

    def sumRange(self, left, right):
        return self.prefix_sum[right + 1] - self.prefix_sum[left]
```

This implementation uses the concept of prefix sum to efficiently calculate the sum of elements between two indices. The `__init__` method initializes the `nums` array and calculates the prefix sum array `prefix_sum` using the `calculate_prefix_sum` helper method.

The `calculate_prefix_sum` method iterates over the `nums` array and calculates the prefix sum at each index, storing it in the `prefix_sum` array. This helps in calculating the sum of elements between any two indices in constant time.

The `sumRange` method takes the `left` and `right` indices as parameters and returns the sum of elements between those indices. It uses the prefix sum array to calculate the sum by subtracting the prefix sum at the `left` index from the prefix sum at the `right + 1` index.

You can create an instance of the NumArray class and call the `sumRange` method as shown in the example:

```python
nums = [-2, 0, 3, -5, 2, -1]
numArray = NumArray(nums)

print(numArray.sumRange(0, 2))  # Output: 1
print(numArray.sumRange(2, 5))  # Output: -1
print(numArray.sumRange(0, 5))  # Output: -3
```

This will produce the expected output:

```
1
-1
-3
```

The implementation has a time complexity of O(n) for initialization and O(1) for each sumRange query, where n is the length of the `nums` array.