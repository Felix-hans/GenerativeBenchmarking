To solve this task, we can use the concept of digital root. The digital root of a non-negative integer is the single-digit value obtained by summing the digits of the number until the result is a single digit.

Here's the implementation of the `addDigits` function in Python:

```python
class Solution:
    def addDigits(self, num: int) -> int:
        if num == 0:
            return 0
        elif num % 9 == 0:
            return 9
        else:
            return num % 9
```

In this implementation, we handle the special case where `num` is equal to 0 and return 0. For other values of `num`, we use the property of digital root that the result is equivalent to `num % 9`, except when `num` is divisible by 9, in which case the digital root is 9.

This implementation has a constant runtime complexity of O(1) because it performs a few arithmetic operations without using any loops or recursion.