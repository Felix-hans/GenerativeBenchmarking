To solve this task, we can follow these steps:

1. Create a dictionary to store the frequency of each number in the input array `nums`.
2. Iterate over `nums` and update the frequency count in the dictionary.
3. Sort `nums` based on the frequency of each number. If two numbers have the same frequency, sort them in decreasing order.
4. Return the sorted `nums` array.

Here's the implementation of the `frequencySort` function in Python:

```python
from typing import List
from collections import Counter

class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        freq = Counter(nums)

        nums.sort(key=lambda x: (freq[x], -x))

        return nums
```

Now, let's test the function with the provided examples:

```python
solution = Solution()

nums = [1, 1, 2, 2, 2, 3]
sorted_nums = solution.frequencySort(nums)
print(sorted_nums)  # Output: [3, 1, 1, 2, 2, 2]

nums = [2, 3, 1, 3, 2]
sorted_nums = solution.frequencySort(nums)
print(sorted_nums)  # Output: [1, 3, 3, 2, 2]

nums = [-1, 1, -6, 4, 5, -6, 1, 4, 1]
sorted_nums = solution.frequencySort(nums)
print(sorted_nums)  # Output: [5, -1, 4, 4, -6, -6, 1, 1, 1]
```

The function correctly sorts the arrays based on the frequency of values and returns the expected output for the provided examples.