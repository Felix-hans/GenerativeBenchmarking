To solve this task, we can follow these steps:

1. Create a dictionary to store the frequency of each number in the input array `nums`.
2. Iterate through `nums` and update the frequency dictionary accordingly.
3. Sort the array `nums` using a custom sorting function that considers the frequency of each number. If two numbers have the same frequency, sort them in decreasing order.
4. Return the sorted array.

Here's the implementation of the `frequencySort` function:

```python
from typing import List

class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        frequency = {}
        
        for num in nums:
            frequency[num] = frequency.get(num, 0) + 1
        
        nums.sort(key=lambda x: (frequency[x], -x))
        
        return nums
```

You can test the implementation using the provided examples:

```python
solution = Solution()

# Example 1
nums = [1, 1, 2, 2, 2, 3]
print(solution.frequencySort(nums))  # Output: [3, 1, 1, 2, 2, 2]

# Example 2
nums = [2, 3, 1, 3, 2]
print(solution.frequencySort(nums))  # Output: [1, 3, 3, 2, 2]

# Example 3
nums = [-1, 1, -6, 4, 5, -6, 1, 4, 1]
print(solution.frequencySort(nums))  # Output: [5, -1, 4, 4, -6, -6, 1, 1, 1]
```

Note that the solution is implemented as a method within a class, as indicated in the provided code.