To reorder the array as per the given conditions, we can follow the following approach:

1. Sort the array in non-decreasing order.
2. Divide the sorted array into two halves: the first half contains the smaller elements and the second half contains the larger elements.
3. Create a new array of the same size as the input array and initialize all elements to 0.
4. Fill the new array with elements from the two halves alternatively, starting with the second half.
   - Take one element from the second half and place it in the even-indexed positions (0, 2, 4, ...).
   - Take one element from the first half and place it in the odd-indexed positions (1, 3, 5, ...).

Here's the implementation of the `wiggleSort` function in Python:

```python
class Solution:
    def wiggleSort(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        
        # Step 1: Sort the array
        nums.sort()
        
        # Step 2: Divide the array into two halves
        mid = n // 2
        nums1 = nums[:mid]
        nums2 = nums[mid:]
        
        # Step 3: Create a new array
        new_nums = [0] * n
        
        # Step 4: Fill the new array alternatively
        j = 0
        for i in range(n-1, 0, -2):
            new_nums[i] = nums2[j]
            j += 1
        for i in range(1, n, 2):
            new_nums[i] = nums1[j]
            j += 1
        
        # Step 5: Modify nums in-place
        for i in range(n):
            nums[i] = new_nums[i]
```

This solution has a time complexity of O(n log n) due to the sorting operation. However, since the problem specifies that the input array length can be up to 5 * 10^4, which is relatively large, achieving a time complexity of O(n) is challenging.