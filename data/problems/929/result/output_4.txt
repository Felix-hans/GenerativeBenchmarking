Here's an implementation of the `numUniqueEmails` function in Python:

```python
from typing import List

class Solution:
    def numUniqueEmails(self, emails: List[str]) -> int:
        unique_emails = set()  # To store unique email addresses
        
        for email in emails:
            local_name, domain_name = email.split("@")  # Split email into local name and domain name
            local_name = local_name.split("+")[0]  # Remove everything after the first '+'
            local_name = local_name.replace(".", "")  # Remove all periods ('.') from the local name
            unique_email = local_name + "@" + domain_name  # Recombine local name and domain name
            
            unique_emails.add(unique_email)  # Add the unique email address to the set
        
        return len(unique_emails)  # Return the number of unique email addresses
```

You can create an instance of the `Solution` class and call the `numUniqueEmails` method, passing the list of emails as the input argument. The function will return the number of different addresses that actually receive emails.

Here's an example usage:

```python
emails = [
    "test.email+alex@leetcode.com",
    "test.e.mail+bob.cathy@leetcode.com",
    "testemail+david@lee.tcode.com"
]

solution = Solution()
result = solution.numUniqueEmails(emails)
print(result)  # Output: 2
```

In this example, there are two unique email addresses that actually receive mails: "testemail@leetcode.com" and "testemail@lee.tcode.com".