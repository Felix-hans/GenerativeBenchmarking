To solve this task, we can use the "minimax" algorithm with a heuristic approach. Here's the implementation:

```python
from typing import List
import random

class Solution:
    def findSecretWord(self, words: List[str], master: 'Master') -> None:
        n = 0  # Number of words in the wordlist
        while n < 6:
            guess_word = random.choice(words)  # Choose a random word as a guess
            matches = master.guess(guess_word)  # Get the number of matches for the guess
            if matches == 6:
                return  # Secret word found, end the function
            words = [word for word in words if self.matchCount(word, guess_word) == matches]  # Filter the remaining words based on the matches
            n += 1

    def matchCount(self, word1: str, word2: str) -> int:
        count = 0
        for i in range(len(word1)):
            if word1[i] == word2[i]:
                count += 1
        return count
```

Explanation:
1. We start by initializing `n` to 0, which represents the number of words in the wordlist we have guessed so far.
2. In each iteration, we randomly choose a word from the remaining wordlist as our guess.
3. We call `master.guess(guess_word)` to get the number of matches for our guess.
4. If the number of matches is 6, that means we have found the secret word, so we can end the function and return.
5. Otherwise, we filter the remaining words based on the matches. We keep only the words that have the same number of matches with our guess as reported by the `master.guess()` function.
6. We increment `n` by 1 to keep track of the number of words we have guessed so far.
7. We repeat steps 2-6 until we have guessed 6 words or found the secret word.

Note: The `matchCount` function is a helper function that counts the number of matching characters in two words.

This solution uses a randomized approach to choose the next guess, and it guarantees that the secret word will be found within the given number of allowed guesses in most cases.