To solve the problem, we can use a hash map to store the elements of the array along with their indices. We iterate through the array and for each element, we check if the complement (target minus the current element) exists in the hash map. If it does, we have found the pair that adds up to the target.

Here's the implementation of the `twoSum` function in Python:

```python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        num_map = {}  # Hash map to store elements and their indices
        
        for i, num in enumerate(nums):
            complement = target - num
            if complement in num_map:
                return [num_map[complement], i]
            num_map[num] = i
        
        return []  # Return empty list if no solution is found
```

The function `twoSum` takes in an array `nums` and an integer `target` as input and returns the indices of the two numbers that add up to the target.

Here are a few examples:

```python
solution = Solution()

# Example 1
nums = [2, 7, 11, 15]
target = 9
print(solution.twoSum(nums, target))  # Output: [0, 1]

# Example 2
nums = [3, 2, 4]
target = 6
print(solution.twoSum(nums, target))  # Output: [1, 2]

# Example 3
nums = [3, 3]
target = 6
print(solution.twoSum(nums, target))  # Output: [0, 1]
```

The time complexity of this solution is O(n), where n is the length of the input array `nums`.