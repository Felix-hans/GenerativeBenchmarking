To add two numbers in base -2, we can follow the algorithm for binary addition, but with some modifications to account for the negative base. Here's an implementation of the `addNegabinary` function in Python:

```python
class Solution:
    def addNegabinary(self, arr1: List[int], arr2: List[int]) -> List[int]:
        result = []
        carry = 0
        i = len(arr1) - 1
        j = len(arr2) - 1

        while i >= 0 or j >= 0 or carry != 0:
            if i >= 0:
                carry += arr1[i]
                i -= 1
            if j >= 0:
                carry += arr2[j]
                j -= 1

            # For negative base, we can have three cases for the carry:
            # 0: Add 0 to the result and set the carry to 0.
            # 1: Add 1 to the result and set the carry to -1.
            # 2: Add 0 to the result and set the carry to -1 (to be carried over).
            result.append(carry & 1)  # Adding the least significant bit to the result.
            carry = -(carry >> 1)  # Shifting the carry to the right and negating it.

        # Remove leading zeros from the result.
        while len(result) > 1 and result[-1] == 0:
            result.pop()

        result.reverse()  # Reversing the result to get the correct order.
        return result
```

This implementation follows the binary addition algorithm but handles the negative base correctly. We iterate over the arrays from the least significant bit to the most significant bit and add the corresponding bits along with the carry. The carry can have three possible values: 0, 1, or 2. We handle these cases accordingly and append the least significant bit to the result. Finally, we remove any leading zeros from the result and reverse it to get the correct order.

Please note that this implementation assumes that the input arrays `arr1` and `arr2` are in the correct format and have no leading zeros, as stated in the problem description.