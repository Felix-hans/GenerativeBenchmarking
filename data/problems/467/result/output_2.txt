To solve this problem, we can use dynamic programming to keep track of the longest contiguous substring ending at each letter in the given string `s`. We'll maintain an array `dp` where `dp[i]` represents the length of the longest contiguous substring ending at the `i`-th letter of `s`. Additionally, we'll use a dictionary `count` to store the count of unique substrings ending at each letter.

Here's the implementation of the `findSubstringInWraproundString` function in Python:

```python
class Solution:
    def findSubstringInWraproundString(self, s: str) -> int:
        dp = [0] * 26  # Initialize the array to store the longest contiguous substring ending at each letter
        count = {}  # Dictionary to store the count of unique substrings ending at each letter
        length = len(s)
        max_length = 0  # Length of the longest contiguous substring
        
        for i in range(length):
            # Check if the current letter is consecutive with the previous letter
            if i > 0 and (ord(s[i]) - ord(s[i-1]) == 1 or ord(s[i-1]) - ord(s[i]) == 25):
                max_length += 1
            else:
                max_length = 1
            
            # Update the length of the longest contiguous substring ending at the current letter
            index = ord(s[i]) - ord('a')
            dp[index] = max(dp[index], max_length)
        
        # Count the number of unique substrings
        for length in dp:
            for j in range(length, 0, -1):
                index = (ord(s[j-1]) - ord('a'))
                count[index] = max(count.get(index, 0), j)
        
        # Return the sum of counts in the dictionary
        return sum(count.values())
```

You can create an instance of the `Solution` class and call the `findSubstringInWraproundString` method with your input string `s` to get the desired output. For example:

```python
solution = Solution()
s = "zab"
print(solution.findSubstringInWraproundString(s))  # Output: 6
```