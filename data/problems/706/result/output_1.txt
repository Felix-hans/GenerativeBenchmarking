Sure! Here's an implementation of the `MyHashMap` class in Python:

```python
class ListNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None


class MyHashMap:
    def __init__(self):
        self.size = 1000
        self.buckets = [None] * self.size

    def _hash(self, key):
        return key % self.size

    def put(self, key: int, value: int) -> None:
        index = self._hash(key)
        if self.buckets[index] is None:
            self.buckets[index] = ListNode(key, value)
        else:
            current = self.buckets[index]
            while True:
                if current.key == key:
                    current.value = value
                    return
                if current.next is None:
                    break
                current = current.next
            current.next = ListNode(key, value)

    def get(self, key: int) -> int:
        index = self._hash(key)
        current = self.buckets[index]
        while current:
            if current.key == key:
                return current.value
            current = current.next
        return -1

    def remove(self, key: int) -> None:
        index = self._hash(key)
        current = self.buckets[index]
        if current and current.key == key:
            self.buckets[index] = current.next
        else:
            prev = None
            while current:
                if current.key == key:
                    prev.next = current.next
                    break
                prev = current
                current = current.next
```

This implementation uses an array of linked lists to handle collisions. The `_hash` function calculates the index for a given key. The `put` method inserts a new node or updates the value if the key already exists. The `get` method returns the value associated with the given key or -1 if the key is not found. The `remove` method removes the node with the specified key from the map.

You can create an instance of `MyHashMap` and use its methods as shown in the example:

```python
myHashMap = MyHashMap()
myHashMap.put(1, 1)
myHashMap.put(2, 2)
print(myHashMap.get(1))  # Output: 1
print(myHashMap.get(3))  # Output: -1
myHashMap.put(2, 1)
print(myHashMap.get(2))  # Output: 1
myHashMap.remove(2)
print(myHashMap.get(2))  # Output: -1
```

Hope this helps!