To solve the given task, you can iterate over the prices array and keep track of the minimum price seen so far and the maximum profit obtained. Here's the implementation of the `maxProfit` function in Python:

```python
class Solution:
    def maxProfit(self, prices):
        if not prices or len(prices) < 2:
            return 0

        min_price = prices[0]
        max_profit = 0

        for i in range(1, len(prices)):
            if prices[i] < min_price:
                min_price = prices[i]
            else:
                profit = prices[i] - min_price
                max_profit = max(max_profit, profit)

        return max_profit
```

You can create an instance of the `Solution` class and call the `maxProfit` method with the prices array as the input. It will return the maximum profit you can achieve from the transaction. Here's an example usage:

```python
prices = [7, 1, 5, 3, 6, 4]
solution = Solution()
max_profit = solution.maxProfit(prices)
print(max_profit)
```

Output:
```
5
```

In this example, the maximum profit is 5, which corresponds to buying on day 2 (price = 1) and selling on day 5 (price = 6).