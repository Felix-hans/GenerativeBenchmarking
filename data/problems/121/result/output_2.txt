You are given an array prices where prices[i] is the price of a given stock
on the i^th day.

You want to maximize your profit by choosing a single day to buy one stock
and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you
cannot achieve any profit, return 0.


Example 1:


Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit =
6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you
must buy before you sell.


Example 2:


Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit =
0.



Constraints:


1 <= prices.length <= 10^5
0 <= prices[i] <= 10^4





```
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
```Implement the above task in Python.Here's the implementation of the `maxProfit` function in Python:

```python
class Solution:
    def maxProfit(self, prices):
        if len(prices) < 2:
            return 0
        
        min_price = prices[0]
        max_profit = 0
        
        for i in range(1, len(prices)):
            if prices[i] < min_price:
                min_price = prices[i]
            elif prices[i] - min_price > max_profit:
                max_profit = prices[i] - min_price
        
        return max_profit
```

The function takes an array of prices as input and returns the maximum profit that can be achieved.

We initialize `min_price` with the first price in the array and `max_profit` with 0. Then, we iterate through the prices starting from the second day. If we find a price lower than the current `min_price`, we update `min_price` to that value. Otherwise, if the difference between the current price and `min_price` is greater than the current `max_profit`, we update `max_profit` with the new value.

Finally, we return `max_profit`, which represents the maximum profit that can be achieved from buying and selling the stock.

Let's test the function with the given examples:

```python
solution = Solution()

prices = [7, 1, 5, 3, 6, 4]
print(solution.maxProfit(prices))  # Output: 5

prices = [7, 6, 4, 3, 1]
print(solution.maxProfit(prices))  # Output: 0
```

The function returns the expected results. In the first example, the maximum profit is achieved by buying on day 2 and selling on day 5, resulting in a profit of 5. In the second example, no profitable transaction is possible, so the output is 0.