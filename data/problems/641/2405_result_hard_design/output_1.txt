Here's an implementation of the circular double-ended queue (deque) in Python:

```python
class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None


class MyCircularDeque:
    def __init__(self, k: int):
        self.capacity = k
        self.size = 0
        self.head = None
        self.tail = None

    def insertFront(self, value: int) -> bool:
        if self.isFull():
            return False
        new_node = Node(value)
        if self.isEmpty():
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
        self.size += 1
        return True

    def insertLast(self, value: int) -> bool:
        if self.isFull():
            return False
        new_node = Node(value)
        if self.isEmpty():
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node
        self.size += 1
        return True

    def deleteFront(self) -> bool:
        if self.isEmpty():
            return False
        if self.head == self.tail:
            self.head = None
            self.tail = None
        else:
            self.head = self.head.next
            self.head.prev = None
        self.size -= 1
        return True

    def deleteLast(self) -> bool:
        if self.isEmpty():
            return False
        if self.head == self.tail:
            self.head = None
            self.tail = None
        else:
            self.tail = self.tail.prev
            self.tail.next = None
        self.size -= 1
        return True

    def getFront(self) -> int:
        if self.isEmpty():
            return -1
        return self.head.value

    def getRear(self) -> int:
        if self.isEmpty():
            return -1
        return self.tail.value

    def isEmpty(self) -> bool:
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.capacity
```

This implementation uses a doubly linked list to represent the circular deque. The `Node` class represents a node in the deque, with a value and references to the previous and next nodes.

In the `MyCircularDeque` class, we maintain the size and capacity of the deque, as well as references to the head and tail nodes. The `insertFront` and `insertLast` methods add new nodes at the front and rear of the deque, respectively. The `deleteFront` and `deleteLast` methods remove nodes from the front and rear of the deque, respectively. The `getFront` and `getRear` methods return the values of the front and rear nodes, respectively. The `isEmpty` and `isFull` methods check if the deque is empty or full, respectively.

Note that the implementation assumes the input values for `k`, `value`, `getFront`, and `getRear` will be within the specified constraints.