Sure! Here's the implementation of the circular double-ended queue (deque) in Python:

```python
class MyCircularDeque:
    def __init__(self, k: int):
        self.k = k
        self.deque = []
        
    def insertFront(self, value: int) -> bool:
        if self.isFull():
            return False
        self.deque.insert(0, value)
        return True
        
    def insertLast(self, value: int) -> bool:
        if self.isFull():
            return False
        self.deque.append(value)
        return True
        
    def deleteFront(self) -> bool:
        if self.isEmpty():
            return False
        self.deque.pop(0)
        return True
        
    def deleteLast(self) -> bool:
        if self.isEmpty():
            return False
        self.deque.pop()
        return True
        
    def getFront(self) -> int:
        if self.isEmpty():
            return -1
        return self.deque[0]
        
    def getRear(self) -> int:
        if self.isEmpty():
            return -1
        return self.deque[-1]
        
    def isEmpty(self) -> bool:
        return len(self.deque) == 0
        
    def isFull(self) -> bool:
        return len(self.deque) == self.k
```

You can test the implementation with the provided example:

```python
myCircularDeque = MyCircularDeque(3)
print(myCircularDeque.insertLast(1))  # True
print(myCircularDeque.insertLast(2))  # True
print(myCircularDeque.insertFront(3)) # True
print(myCircularDeque.insertFront(4)) # False
print(myCircularDeque.getRear())      # 2
print(myCircularDeque.isFull())       # True
print(myCircularDeque.deleteLast())   # True
print(myCircularDeque.insertFront(4)) # True
print(myCircularDeque.getFront())     # 4
```

Output:
```
True
True
True
False
2
True
True
True
4
```

The output matches the expected result provided in the example.