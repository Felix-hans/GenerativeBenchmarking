To find the kth smallest distance among all pairs of integers in the given array, we can follow the following steps:

1. Sort the input array `nums` in ascending order.
2. Define two pointers, `left` and `right`, to track the range of possible distances.
   - Initialize `left` to 0 and `right` to `nums[-1] - nums[0]`.
3. While `left` is less than `right`, perform binary search to find the mid-distance.
   - Set `mid` as the average of `left` and `right`.
   - Count the number of pairs with distances less than or equal to `mid`.
     - Initialize `count` as 0.
     - Iterate over the array using two pointers, `i` and `j`.
       - For each `i`, find the maximum `j` such that `nums[j] - nums[i] <= mid`.
       - Increment `count` by `j - i`.
   - If `count` is less than `k`, update `left = mid + 1`.
   - Otherwise, update `right = mid`.
4. Return `left`, which will be the kth smallest distance.

Here's the implementation of the `smallestDistancePair` method:

```python
class Solution:
    def smallestDistancePair(self, nums, k):
        nums.sort()  # Step 1
        left, right = 0, nums[-1] - nums[0]  # Step 2

        while left < right:  # Step 3
            mid = (left + right) // 2
            count = 0

            # Count pairs with distances <= mid
            i = 0
            for j in range(len(nums)):
                while nums[j] - nums[i] > mid:
                    i += 1
                count += j - i

            if count < k:
                left = mid + 1
            else:
                right = mid

        return left  # Step 4
```

You can create an instance of the `Solution` class and call the `smallestDistancePair` method, passing the `nums` array and `k` as arguments. For example:

```python
nums = [1, 3, 1]
k = 1

solution = Solution()
result = solution.smallestDistancePair(nums, k)
print(result)  # Output: 0
```

Hope this helps!