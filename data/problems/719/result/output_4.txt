To solve the problem, we can follow these steps:

1. Sort the `nums` array in non-decreasing order.
2. Initialize two pointers, `left` and `right`, to keep track of the range of distances.
   - `left` is the minimum possible distance, which is 0.
   - `right` is the maximum possible distance, which is `nums[-1] - nums[0]`.
3. While `left` is less than `right`, perform a binary search to find the middle distance (`mid`) between `left` and `right`.
4. Count the number of pairs with a distance less than or equal to `mid` using a sliding window approach.
   - Initialize `count` to 0.
   - Initialize `start` to 0, and `end` to 0.
   - Iterate through the array with the index `i` from 0 to `n-1`.
     - Increment `end` until `nums[i] - nums[start]` is greater than `mid`.
     - Update `count` by adding `end - start`.
     - Move the sliding window by incrementing `start`.
5. If the count is less than `k`, update `left` to `mid + 1`.
6. If the count is greater than or equal to `k`, update `right` to `mid`.
7. Return `left`, which will be the k-th smallest distance.

Here's the implementation of the `smallestDistancePair` function:

```python
from typing import List

class Solution:
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()  # Sort the array in non-decreasing order
        n = len(nums)
        left, right = 0, nums[-1] - nums[0]

        while left < right:
            mid = (left + right) // 2
            count = 0
            start = 0

            for i in range(n):
                while nums[i] - nums[start] > mid:
                    start += 1
                count += i - start

            if count < k:
                left = mid + 1
            else:
                right = mid

        return left
```

Now, you can create an instance of the `Solution` class and call the `smallestDistancePair` function with the given input to get the desired result. For example:

```python
solution = Solution()
nums = [1, 3, 1]
k = 1
result = solution.smallestDistancePair(nums, k)
print(result)  # Output: 0
```

You can similarly test the function with other test cases.