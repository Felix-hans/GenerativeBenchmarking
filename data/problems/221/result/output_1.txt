You can solve this problem using dynamic programming. Here's the Python code to implement the `maximalSquare` function:

```python
class Solution:
    def maximalSquare(self, matrix):
        if not matrix:
            return 0
        
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        max_side = 0
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if matrix[i - 1][j - 1] == '1':
                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1
                    max_side = max(max_side, dp[i][j])
        
        return max_side * max_side
```

This solution uses a 2D dynamic programming table, `dp`, where `dp[i][j]` represents the size of the largest square with its bottom-right corner at position `(i, j)` in the matrix. 

The solution iterates over each position in the matrix and checks if the current cell is `'1'`. If it is, the size of the square is determined by taking the minimum value from the three adjacent cells in the `dp` table (top, left, and top-left) and adding 1.

The variable `max_side` keeps track of the maximum side length of the square encountered so far. Finally, the function returns the area of the largest square, which is `max_side` squared.

You can create an instance of the `Solution` class and call the `maximalSquare` method with your input matrix to obtain the result.