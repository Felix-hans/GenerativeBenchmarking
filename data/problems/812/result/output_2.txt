To solve this problem, we can use the Shoelace formula (also known as the Gauss area formula) to calculate the area of a triangle given its three vertices. The formula is as follows:

Area = 0.5 * |x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)|

We can iterate through all possible combinations of three points from the given list and calculate the area for each triangle. Finally, we return the maximum area found.

Here's the implementation of the `largestTriangleArea` method in Python:

```python
from typing import List

class Solution:
    def largestTriangleArea(self, points: List[List[int]]) -> float:
        n = len(points)
        max_area = 0.0
        
        for i in range(n - 2):
            x1, y1 = points[i]
            
            for j in range(i + 1, n - 1):
                x2, y2 = points[j]
                
                for k in range(j + 1, n):
                    x3, y3 = points[k]
                    
                    area = 0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))
                    max_area = max(max_area, area)
        
        return max_area
```

You can create an instance of the `Solution` class and call the `largestTriangleArea` method, passing in the `points` list as an argument. The method will return the area of the largest triangle that can be formed.

Example usage:

```python
solution = Solution()
points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
result = solution.largestTriangleArea(points)
print(result)  # Output: 2.0
```