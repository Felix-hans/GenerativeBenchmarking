To solve this problem, we can use dynamic programming to keep track of the maximum profit we can achieve at each day with a certain number of transactions.

Here's the Python code that implements the solution:

```python
class Solution:
    def maxProfit(self, prices):
        if not prices:
            return 0

        n = len(prices)
        max_transactions = 2

        # Initialize the dp table
        dp = [[0] * (n + 1) for _ in range(max_transactions + 1)]

        for i in range(1, max_transactions + 1):
            # Track the maximum profit after buying the stock at the first day
            min_price = prices[0]
            for j in range(1, n + 1):
                # Update the minimum price to buy the stock at day j
                min_price = min(min_price, prices[j - 1] - dp[i - 1][j - 1])
                # Update the maximum profit we can achieve at day j with i transactions
                dp[i][j] = max(dp[i][j - 1], prices[j - 1] - min_price)

        return dp[max_transactions][n]
```

Let's test the solution with the provided examples:

```python
solution = Solution()

prices = [3, 3, 5, 0, 0, 3, 1, 4]
print(solution.maxProfit(prices))  # Output: 6

prices = [1, 2, 3, 4, 5]
print(solution.maxProfit(prices))  # Output: 4

prices = [7, 6, 4, 3, 1]
print(solution.maxProfit(prices))  # Output: 0
```

The solution should give the correct output for the provided examples.