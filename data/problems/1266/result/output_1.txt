To solve the given task, you can iterate through the points and calculate the time it takes to move from one point to the next. Since you can move vertically, horizontally, or diagonally, you need to consider the absolute differences between the x-coordinates and y-coordinates of consecutive points.

Here's the implementation of the `minTimeToVisitAllPoints` function in Python:

```python
from typing import List

class Solution:
    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:
        total_time = 0
        for i in range(len(points) - 1):
            curr_point = points[i]
            next_point = points[i + 1]
            x_diff = abs(curr_point[0] - next_point[0])
            y_diff = abs(curr_point[1] - next_point[1])
            total_time += max(x_diff, y_diff)  # Diagonal movement takes max(x_diff, y_diff) seconds
        return total_time
```

You can create an instance of the `Solution` class and call the `minTimeToVisitAllPoints` function, passing the points as the input. It will return the minimum time in seconds to visit all the points in the given order.

Example usage:
```python
solution = Solution()
points = [[1,1],[3,4],[-1,0]]
print(solution.minTimeToVisitAllPoints(points))  # Output: 7

points = [[3,2],[-2,2]]
print(solution.minTimeToVisitAllPoints(points))  # Output: 5
```

The code iterates through the points, calculates the absolute differences between consecutive points' x-coordinates and y-coordinates, and adds the maximum difference (diagonal movement) to the total time. Finally, it returns the total time required to visit all the points.