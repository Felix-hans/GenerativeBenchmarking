To solve this task, we can iterate over the list of dominoes and count the number of occurrences of each equivalent pair. We can use a dictionary to store the counts of each equivalent pair. 

Here's the implementation of the `numEquivDominoPairs` function:

```python
from typing import List

class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        pair_counts = {}  # Dictionary to store counts of equivalent pairs
        num_pairs = 0  # Counter for the total number of equivalent pairs
        
        for domino in dominoes:
            # Sort the domino pair to ensure consistent representation
            domino.sort()
            pair_key = tuple(domino)  # Convert the pair to a tuple for dictionary key
            
            # Increment the count for the current equivalent pair
            pair_counts[pair_key] = pair_counts.get(pair_key, 0) + 1
            
        # Calculate the number of pairs using the count of each equivalent pair
        for count in pair_counts.values():
            # If there are n occurrences of an equivalent pair, we can form n*(n-1)/2 pairs
            num_pairs += count * (count - 1) // 2
        
        return num_pairs
```

You can create an instance of the `Solution` class and call the `numEquivDominoPairs` function, passing the `dominoes` list as an argument, to get the desired result. For example:

```python
solution = Solution()
dominoes = [[1, 2], [2, 1], [3, 4], [5, 6]]
result = solution.numEquivDominoPairs(dominoes)
print(result)  # Output: 1
```

```python
solution = Solution()
dominoes = [[1, 2], [1, 2], [1, 1], [1, 2], [2, 2]]
result = solution.numEquivDominoPairs(dominoes)
print(result)  # Output: 3
```

The function counts the number of equivalent pairs and returns the total count as the output.