To implement the LRU cache, we can use a combination of a doubly linked list and a hash map. The doubly linked list will keep track of the order of the elements based on their usage, with the least recently used element at the head and the most recently used element at the tail. The hash map will allow us to quickly access elements in the cache.

Here's the implementation of the LRUCache class in Python:

```python
class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None


class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}
        self.head = Node(0, 0)
        self.tail = Node(0, 0)
        self.head.next = self.tail
        self.tail.prev = self.head

    def get(self, key: int) -> int:
        if key in self.cache:
            node = self.cache[key]
            self._remove(node)
            self._add(node)
            return node.value
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self._remove(self.cache[key])
        node = Node(key, value)
        self._add(node)
        self.cache[key] = node
        if len(self.cache) > self.capacity:
            node = self.head.next
            self._remove(node)
            del self.cache[node.key]

    def _add(self, node):
        prev_node = self.tail.prev
        prev_node.next = node
        node.prev = prev_node
        node.next = self.tail
        self.tail.prev = node

    def _remove(self, node):
        prev_node = node.prev
        next_node = node.next
        prev_node.next = next_node
        next_node.prev = prev_node
```

The `Node` class represents a node in the doubly linked list, which stores the key and value. The `LRUCache` class has an `__init__` method to initialize the cache, a `get` method to retrieve a value from the cache, a `put` method to update the cache, and two helper methods `_add` and `_remove` to manipulate the doubly linked list.

Here's how you can use the `LRUCache` class:

```python
lru_cache = LRUCache(2)
lru_cache.put(1, 1)
lru_cache.put(2, 2)
print(lru_cache.get(1))  # Output: 1
lru_cache.put(3, 3)
print(lru_cache.get(2))  # Output: -1
lru_cache.put(4, 4)
print(lru_cache.get(1))  # Output: -1
print(lru_cache.get(3))  # Output: 3
print(lru_cache.get(4))  # Output: 4
```

The output matches the example provided in the question.