To solve this task, we can use a hashmap to count the frequency of each card in the hand. Then, we iterate over the hand array and for each card, we check if it can be the start of a group. If it can, we decrement the frequency of the card and continue building the group until we reach the desired groupSize. If at any point we encounter a card that cannot be the start of a group, we return False. If we successfully form all the groups, we return True.

Here's the implementation of the `isNStraightHand` function in Python:

```python
from typing import List

class Solution:
    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        
        count = {}
        for card in hand:
            count[card] = count.get(card, 0) + 1

        hand.sort()

        for card in hand:
            if count[card] > 0:
                for i in range(groupSize):
                    if count.get(card + i, 0) > 0:
                        count[card + i] -= 1
                    else:
                        return False

        return True
```

Now, you can create an instance of the `Solution` class and call the `isNStraightHand` function with the given inputs to check if Alice can rearrange the cards into groups of size `groupSize`.