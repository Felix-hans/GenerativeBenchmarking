To solve this problem, we can follow the following approach:

1. Create a dictionary, `card_counts`, to store the frequency of each card in the `hand` list.
2. Sort the `hand` list in ascending order.
3. Iterate over the sorted `hand` list.
4. For each card `card` in the `hand`, do the following:
   - If the frequency of `card` in `card_counts` is 0, continue to the next iteration.
   - Otherwise, decrease the frequency of `card` by 1 in `card_counts`.
   - Check if there are `groupSize - 1` consecutive cards after `card` in `card_counts`. If not, return `False`.
   - Decrease the frequency of the consecutive cards by 1 in `card_counts`.
5. If we have successfully iterated over all the cards in the `hand`, return `True`.
6. If we haven't returned `True` by this point, it means we couldn't form groups of size `groupSize`, so we return `False`.

Here's the implementation of the `isNStraightHand` function:

```python
from typing import List

class Solution:
    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        card_counts = {}
        for card in hand:
            card_counts[card] = card_counts.get(card, 0) + 1

        hand.sort()

        for card in hand:
            if card_counts[card] == 0:
                continue

            card_counts[card] -= 1

            for i in range(1, groupSize):
                if card + i not in card_counts or card_counts[card + i] == 0:
                    return False
                card_counts[card + i] -= 1

        return True
```

You can create an instance of the `Solution` class and call the `isNStraightHand` function with the given `hand` list and `groupSize` parameter to test it:

```python
hand = [1, 2, 3, 6, 2, 3, 4, 7, 8]
groupSize = 3

solution = Solution()
result = solution.isNStraightHand(hand, groupSize)
print(result)
```

Output:
```
True
```