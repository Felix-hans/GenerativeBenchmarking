To solve the given task in Python, you can use the following implementation:

```python
from typing import List
from collections import Counter

class Solution:
    def minSetSize(self, arr: List[int]) -> int:
        freq = Counter(arr)
        count = 0
        removed = 0
        for num, occurrence in freq.most_common():
            count += 1
            removed += occurrence
            if removed >= len(arr) // 2:
                break
        return count
```

In this solution, we first create a frequency counter using the `Counter` class from the `collections` module. This counter will store the frequency of each integer in the input array.

We then initialize two variables, `count` and `removed`, to keep track of the number of integers chosen and the total count of removed integers, respectively.

Next, we iterate over the elements in the counter in descending order of their occurrence using the `most_common()` method. For each element, we increment the `count` and add its occurrence to `removed`.

Inside the loop, we check if the `removed` count has reached or exceeded half of the array length (`len(arr) // 2`). If it has, we break out of the loop since we have already removed enough integers.

Finally, we return the value of `count`, which represents the minimum size of the set required to remove at least half of the integers from the array.

You can create an instance of the `Solution` class and call the `minSetSize()` method with the input array to get the desired result. For example:

```python
solution = Solution()
arr = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7]
result = solution.minSetSize(arr)
print(result)  # Output: 2
```

```python
solution = Solution()
arr = [7, 7, 7, 7, 7, 7]
result = solution.minSetSize(arr)
print(result)  # Output: 1
```

The solution should work correctly for the given constraints.