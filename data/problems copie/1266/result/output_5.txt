To solve the given problem, you can iterate through the points and calculate the time it takes to move from the current point to the next point using the provided rules. You can sum up the time for each move to get the total minimum time.

Here's the implementation of the `minTimeToVisitAllPoints` function in Python:

```python
from typing import List

class Solution:
    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:
        total_time = 0
        for i in range(1, len(points)):
            x1, y1 = points[i-1]
            x2, y2 = points[i]
            dx = abs(x2 - x1)
            dy = abs(y2 - y1)
            total_time += max(dx, dy, dx + dy - min(dx, dy))
        return total_time
```

You can create an instance of the `Solution` class and call the `minTimeToVisitAllPoints` function with the input points to get the minimum time:

```python
points = [[1, 1], [3, 4], [-1, 0]]
solution = Solution()
min_time = solution.minTimeToVisitAllPoints(points)
print(min_time)  # Output: 7
```

```python
points = [[3, 2], [-2, 2]]
solution = Solution()
min_time = solution.minTimeToVisitAllPoints(points)
print(min_time)  # Output: 5
```

The code iterates through each pair of consecutive points (`points[i-1]` and `points[i]`). It calculates the absolute differences in x and y coordinates (`dx` and `dy`). The maximum of these differences represents the diagonal moves, while the minimum represents the straight moves. By adding the maximum difference and the difference between the sum and the minimum difference, we can obtain the total time for moving from one point to the next. Finally, the total time is accumulated for all the moves.