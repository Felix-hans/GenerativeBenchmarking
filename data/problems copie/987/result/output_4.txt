To solve the problem, we can perform a breadth-first search (BFS) on the binary tree while keeping track of the column index for each node. We can use a dictionary to map each column index to the nodes present in that column.

Here's the implementation of the `verticalTraversal` function:

```python
from typing import List, Optional
from collections import defaultdict
from queue import Queue

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []

        # Dictionary to map column index to nodes
        column_nodes = defaultdict(list)

        # Queue for BFS traversal
        queue = Queue()
        # Queue for column index tracking
        col_queue = Queue()

        # Enqueue the root node and its column index
        queue.put(root)
        col_queue.put(0)

        # Perform BFS traversal
        while not queue.empty():
            node = queue.get()
            col_index = col_queue.get()

            # Add the node to the corresponding column index
            column_nodes[col_index].append(node.val)

            # Enqueue the left child with col_index - 1
            if node.left:
                queue.put(node.left)
                col_queue.put(col_index - 1)

            # Enqueue the right child with col_index + 1
            if node.right:
                queue.put(node.right)
                col_queue.put(col_index + 1)

        # Sort nodes within each column by their values
        vertical_order = []
        for col_index in sorted(column_nodes.keys()):
            column = column_nodes[col_index]
            column.sort()
            vertical_order.append(column)

        return vertical_order
```

You can create an instance of the `Solution` class and call the `verticalTraversal` function with the root of the binary tree to get the vertical order traversal. For example:

```python
# Example usage
root = TreeNode(3)
root.left = TreeNode(9)
root.right = TreeNode(20)
root.right.left = TreeNode(15)
root.right.right = TreeNode(7)

solution = Solution()
vertical_order = solution.verticalTraversal(root)
print(vertical_order)
```

This will output:

```
[[9], [3, 15], [20], [7]]
```

Note: The implementation assumes that the `TreeNode` class is defined as shown in the code.