Certainly! Here's an implementation of the `getMaximumGenerated` function in Python:

```python
class Solution:
    def getMaximumGenerated(self, n: int) -> int:
        if n == 0:
            return 0
        
        nums = [0] * (n + 1)
        nums[1] = 1
        maximum = 1
        
        for i in range(2, n + 1):
            if i % 2 == 0:
                nums[i] = nums[i // 2]
            else:
                nums[i] = nums[i // 2] + nums[i // 2 + 1]
            
            maximum = max(maximum, nums[i])
        
        return maximum
```

You can create an instance of the `Solution` class and call the `getMaximumGenerated` function on it, passing the input integer `n`. It will return the maximum integer in the generated array.

Here's an example usage:

```python
solution = Solution()
n = 7
maximum = solution.getMaximumGenerated(n)
print(maximum)  # Output: 3
```

I hope this helps! Let me know if you have any further questions.