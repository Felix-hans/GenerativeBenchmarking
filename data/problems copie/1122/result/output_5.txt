You can implement the task in Python using the `sorted()` function and a custom sorting key. Here's the implementation:

```python
class Solution:
    def relativeSortArray(self, arr1, arr2):
        # Create a dictionary to store the indices of elements in arr2
        indices = {num: i for i, num in enumerate(arr2)}

        # Custom sorting key function
        def custom_sort_key(num):
            if num in indices:
                # Sort by the index in arr2 if the element is present
                return indices[num]
            else:
                # Sort other elements at the end in ascending order
                return len(arr2) + num

        # Sort arr1 using the custom sorting key
        arr1.sort(key=custom_sort_key)
        return arr1
```

You can create an instance of the `Solution` class and call the `relativeSortArray` method with your input arrays to get the sorted result. Here's an example:

```python
arr1 = [2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19]
arr2 = [2, 1, 4, 3, 9, 6]

solution = Solution()
sorted_arr1 = solution.relativeSortArray(arr1, arr2)
print(sorted_arr1)
```

Output:
```
[2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19]
```

You can apply the same approach to other test cases as well.