To solve the given task, we can iterate over each cell in the matrix and count the number of battleships based on the following conditions:

1. If the current cell is '.', it does not contribute to the count of battleships.
2. If the current cell is 'X' and its left cell (if it exists) is also 'X', or its above cell (if it exists) is also 'X', it means the current cell is not the starting point of a battleship. Hence, we skip counting it.
3. If the above conditions are not met, it means the current cell is the starting point of a battleship. We increment the count by 1.

Here's the implementation of the `countBattleships` function in Python:

```python
class Solution:
    def countBattleships(self, board: List[List[str]]) -> int:
        if not board or not board[0]:
            return 0

        m, n = len(board), len(board[0])
        count = 0

        for i in range(m):
            for j in range(n):
                if board[i][j] == '.':
                    continue

                if i > 0 and board[i-1][j] == 'X':
                    continue

                if j > 0 and board[i][j-1] == 'X':
                    continue

                count += 1

        return count
```

This solution has a time complexity of O(m * n) since we iterate over each cell in the matrix once. It uses O(1) extra memory since it does not require any additional data structures beyond the input matrix.