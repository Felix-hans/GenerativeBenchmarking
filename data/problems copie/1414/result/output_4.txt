To solve this problem, we can follow the following steps:

1. Generate Fibonacci numbers up to the given constraint k.
2. Initialize a variable count to 0 to keep track of the number of Fibonacci numbers used.
3. Start from the largest Fibonacci number and subtract it from k.
4. If the result is greater than or equal to 0, increment the count by 1 and update k with the difference.
5. Repeat steps 3 and 4 until k becomes 0.
6. Finally, return the count as the minimum number of Fibonacci numbers required to sum up to k.

Here's the implementation of the `findMinFibonacciNumbers` function in Python:

```python
class Solution:
    def findMinFibonacciNumbers(self, k: int) -> int:
        fib_nums = [1, 1]
        while fib_nums[-1] < k:
            fib_nums.append(fib_nums[-1] + fib_nums[-2])
        
        count = 0
        index = len(fib_nums) - 1
        while k > 0:
            if fib_nums[index] <= k:
                count += 1
                k -= fib_nums[index]
            index -= 1
        
        return count
```

Now, you can create an instance of the `Solution` class and call the `findMinFibonacciNumbers` function with a given value of k to test it out. For example:

```python
solution = Solution()
k = 7
result = solution.findMinFibonacciNumbers(k)
print(result)  # Output: 2
```

You can repeat the process for different values of k to obtain the corresponding minimum number of Fibonacci numbers.