To solve this problem, we can use a greedy approach. We start by generating Fibonacci numbers until we find a number greater than or equal to k. Then, we repeatedly subtract the largest Fibonacci number from k until k becomes 0.

Here's the implementation of the `findMinFibonacciNumbers` method in Python:

```python
class Solution:
    def findMinFibonacciNumbers(self, k: int) -> int:
        # Generate Fibonacci numbers until we find a number greater than or equal to k
        fib_nums = [1, 1]
        while fib_nums[-1] < k:
            fib_nums.append(fib_nums[-1] + fib_nums[-2])
        
        count = 0
        # Greedily subtract the largest Fibonacci number from k until k becomes 0
        for i in range(len(fib_nums) - 1, -1, -1):
            if k >= fib_nums[i]:
                count += 1
                k -= fib_nums[i]
            if k == 0:
                break
        
        return count
```

Let's test the solution with the provided examples:

```python
solution = Solution()

print(solution.findMinFibonacciNumbers(7))  # Output: 2
print(solution.findMinFibonacciNumbers(10))  # Output: 2
print(solution.findMinFibonacciNumbers(19))  # Output: 3
```

The output matches the expected results for the given examples.