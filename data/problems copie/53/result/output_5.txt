To find the subarray with the largest sum in the given array `nums`, we can use Kadane's algorithm, which has a time complexity of O(n). Here's the implementation of the `maxSubArray` function in Python:

```python
class Solution:
    def maxSubArray(self, nums):
        current_sum = nums[0]
        max_sum = nums[0]
        
        for i in range(1, len(nums)):
            current_sum = max(nums[i], current_sum + nums[i])
            max_sum = max(max_sum, current_sum)
        
        return max_sum
```

In this implementation, we iterate through the array `nums` starting from the second element. For each element, we update the `current_sum` by taking the maximum value between the current element and the sum of the current element and the previous `current_sum`. Then, we update the `max_sum` by taking the maximum value between the current `max_sum` and the updated `current_sum`. Finally, we return the `max_sum`.

You can create an instance of the `Solution` class and call the `maxSubArray` function with your input array to get the desired result. For example:

```python
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
solution = Solution()
result = solution.maxSubArray(nums)
print(result)  # Output: 6
```

The result will be printed as 6, which is the sum of the largest subarray in the given array `nums`.