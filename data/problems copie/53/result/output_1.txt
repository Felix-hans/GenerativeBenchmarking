Here's the implementation of the `maxSubArray` function in Python that finds the subarray with the largest sum:

```python
class Solution:
    def maxSubArray(self, nums):
        if not nums:
            return 0
        
        max_sum = current_sum = nums[0]
        for num in nums[1:]:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        
        return max_sum
```

This solution uses Kadane's algorithm, which is an efficient algorithm that traverses the array once and keeps track of the maximum subarray sum found so far (`max_sum`) and the current subarray sum (`current_sum`). It iterates through the array and updates `current_sum` by either starting a new subarray or extending the current subarray with the current element, whichever gives a larger sum. At each step, it also updates `max_sum` if `current_sum` is greater.

You can create an instance of the `Solution` class and call the `maxSubArray` method with the input array to find the maximum subarray sum:

```python
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
solution = Solution()
max_sum = solution.maxSubArray(nums)
print(max_sum)  # Output: 6
```

This implementation has a time complexity of O(n), where n is the length of the input array, as it only traverses the array once.