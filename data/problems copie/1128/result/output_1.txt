To solve the given task in Python, we can use a hash map to store the count of equivalent dominoes. We iterate through the list of dominoes, convert each pair into a tuple and increment its count in the hash map. Then, we calculate the number of pairs using the formula n * (n - 1) / 2, where n is the count of equivalent dominoes. Finally, we sum up the counts of all equivalent dominoes and return the total count.

Here's the implementation of the `numEquivDominoPairs` function:

```python
from typing import List

class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        count = {}
        pairs = 0
        
        for domino in dominoes:
            key = tuple(sorted(domino))
            count[key] = count.get(key, 0) + 1
        
        for val in count.values():
            pairs += val * (val - 1) // 2
        
        return pairs
```

You can create an instance of the `Solution` class and call the `numEquivDominoPairs` method with the given list of dominoes to get the desired result. Here's an example usage:

```python
dominoes = [[1,2],[2,1],[3,4],[5,6]]
solution = Solution()
pairs = solution.numEquivDominoPairs(dominoes)
print(pairs)  # Output: 1
```

Hope this helps!