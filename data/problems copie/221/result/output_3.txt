To find the largest square containing only 1's in a binary matrix, we can use dynamic programming. We will create an auxiliary matrix `dp` of the same size as the input matrix, where `dp[i][j]` represents the size of the largest square with its bottom-right corner at position `(i, j)`.

The algorithm works as follows:

1. Initialize the first row and first column of `dp` to be the same as the input matrix since a square with a single 1 has a size of 1.
2. For each position `(i, j)` in the input matrix starting from `(1, 1)`, do the following:
   - If the current element in the input matrix is '1', set `dp[i][j]` to be the minimum of `dp[i-1][j-1]`, `dp[i][j-1]`, and `dp[i-1][j]` plus 1. This means that the current position can form a square with its adjacent positions.
   - If the current element in the input matrix is '0', set `dp[i][j]` to 0 since it cannot form a square.
3. Find the maximum value in the `dp` matrix and return its square as the result.

Here's the implementation of the `maximalSquare` function:

```python
from typing import List

class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix:
            return 0
        
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        max_size = 0
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if matrix[i-1][j-1] == '1':
                    dp[i][j] = min(dp[i-1][j-1], dp[i][j-1], dp[i-1][j]) + 1
                    max_size = max(max_size, dp[i][j])
        
        return max_size * max_size
```

Now you can create an instance of the `Solution` class and call the `maximalSquare` method with your matrix as the input to get the largest square's area.