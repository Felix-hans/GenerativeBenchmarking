Here's the implementation of the `TimeMap` class in Python that fulfills the requirements mentioned:

```python
from collections import defaultdict


class TimeMap:
    def __init__(self):
        self.data = defaultdict(list)

    def set(self, key: str, value: str, timestamp: int) -> None:
        self.data[key].append((timestamp, value))

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.data:
            return ""

        values = self.data[key]

        # Perform binary search to find the largest timestamp_prev <= timestamp
        left, right = 0, len(values) - 1
        while left <= right:
            mid = (left + right) // 2
            if values[mid][0] == timestamp:
                return values[mid][1]
            elif values[mid][0] < timestamp:
                left = mid + 1
            else:
                right = mid - 1

        # If no exact match found, right will be the index of the largest timestamp_prev < timestamp
        if right >= 0:
            return values[right][1]
        else:
            return ""
```

The `TimeMap` class uses a dictionary (`self.data`) to store the key-value pairs, where each key is associated with a list of tuples `(timestamp, value)`. The list is maintained in ascending order of timestamps to enable efficient binary search during the `get` operation.

In the `set` method, we simply append the new `(timestamp, value)` tuple to the list corresponding to the given key.

In the `get` method, we first check if the key exists in `self.data`. If not, we return an empty string. Otherwise, we perform a binary search on the list of values for the key to find the largest `timestamp_prev` that is less than or equal to the given `timestamp`. We then return the corresponding value.

Note: The implementation assumes that the timestamps passed to the `get` method are always increasing and that there are no duplicate timestamps for the same key.