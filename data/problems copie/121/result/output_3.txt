To solve this problem, we can iterate through the array of prices and keep track of the minimum price encountered so far. At each step, we calculate the potential profit by subtracting the minimum price from the current price. If this profit is greater than the maximum profit seen so far, we update the maximum profit. Finally, we return the maximum profit obtained.

Here's the implementation of the `maxProfit` function in Python:

```python
from typing import List

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0

        min_price = prices[0]
        max_profit = 0

        for price in prices:
            if price < min_price:
                min_price = price
            else:
                max_profit = max(max_profit, price - min_price)

        return max_profit
```

This solution has a time complexity of O(n), where n is the length of the prices array, as we iterate through the array once.