To implement the `RandomizedCollection` class in Python, we can use a combination of a list and a dictionary. The list will store the elements in the collection, while the dictionary will store the indices of the elements in the list.

Here's the implementation:

```python
import random

class RandomizedCollection:
    def __init__(self):
        self.collection = []
        self.indices = {}

    def insert(self, val: int) -> bool:
        self.collection.append(val)
        if val in self.indices:
            self.indices[val].append(len(self.collection) - 1)
            return False
        else:
            self.indices[val] = [len(self.collection) - 1]
            return True

    def remove(self, val: int) -> bool:
        if val in self.indices:
            last_element = self.collection[-1]
            index = self.indices[val].pop()
            if len(self.indices[val]) == 0:
                del self.indices[val]
            if index != len(self.collection) - 1:
                self.collection[index] = last_element
                self.indices[last_element].remove(len(self.collection) - 1)
                self.indices[last_element].append(index)
            self.collection.pop()
            return True
        return False

    def getRandom(self) -> int:
        return random.choice(self.collection)
```

The `insert` method appends the element to the end of the collection list and updates the indices dictionary accordingly. If the element already exists in the indices dictionary, it means it's a duplicate, so we return `False`; otherwise, we return `True`.

The `remove` method checks if the element exists in the indices dictionary. If it does, it retrieves the index of the element in the collection list. It swaps the element with the last element in the list to ensure constant time removal. It also updates the indices dictionary and removes the element from the list. If the element has no more occurrences in the collection, it removes the element from the indices dictionary as well. If the element doesn't exist in the indices dictionary, it returns `False`.

The `getRandom` method simply returns a random element from the collection list using `random.choice()`.

This implementation ensures that the average time complexity for each operation is O(1).