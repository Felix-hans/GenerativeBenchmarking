Here's the implementation of the `getRow` function that returns the rowIndex^th row of Pascal's triangle:

```python
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        row = [1]  # Initialize the row with the first element as 1
        for i in range(1, rowIndex + 1):
            # Generate the next row by calculating the sum of two adjacent elements in the previous row
            next_row = [1]  # Start the next row with 1
            for j in range(1, i):
                next_row.append(row[j - 1] + row[j])  # Sum of two adjacent elements in the previous row
            next_row.append(1)  # End the next row with 1
            row = next_row  # Update the current row with the next row
        return row
```

This implementation uses only O(rowIndex) extra space. It iterates from the second row (index 1) up to the given rowIndex, generating each row based on the previous row. The elements in each row are calculated by summing the adjacent elements in the previous row. The final row is returned as the result.