To solve this task and generate the `rowIndex`-th row of Pascal's triangle, we can use a simple iterative approach. We start with the first row `[1]` and iteratively generate each row by summing the corresponding elements from the previous row and appending `1` at the end.

Here's the implementation of the `getRow` function in Python:

```python
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        row = [1]  # Initialize the first row
        
        for i in range(rowIndex):
            # Generate the next row
            next_row = [1]  # First element of the row is always 1
            
            # Compute the middle elements by summing the corresponding elements from the previous row
            for j in range(1, len(row)):
                next_row.append(row[j-1] + row[j])
            
            next_row.append(1)  # Last element of the row is always 1
            row = next_row  # Update the current row
        
        return row
```

This solution has a time complexity of O(rowIndex^2) since we iterate rowIndex times, and in each iteration, we generate a row with rowIndex elements. However, the space complexity is O(rowIndex) since we only need to store the current row and the next row to generate the new row.