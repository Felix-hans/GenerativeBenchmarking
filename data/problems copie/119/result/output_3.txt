Here's the implementation of the `getRow` function in Python:

```python
from typing import List

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        row = [1]  # Start with the first row [1]
        
        for i in range(1, rowIndex + 1):
            # Generate the next row based on the current row
            next_row = [1]
            
            for j in range(1, i):
                # Calculate the value by summing the two numbers above it
                next_row.append(row[j - 1] + row[j])
            
            next_row.append(1)
            row = next_row
        
        return row
```

This solution generates each row of Pascal's triangle iteratively, starting from the first row. It uses a nested loop to calculate the values of each row based on the previous row. The outer loop runs from 1 to `rowIndex`, and the inner loop calculates the value at each position of the row. The resulting row is returned as the output.

The time complexity of this solution is O(rowIndex^2) because we generate each row iteratively. However, the space complexity is optimized to O(rowIndex) as we only store the current row and the next row temporarily in the `row` and `next_row` variables, respectively.