Here's an implementation of the `getRow` function in Python that returns the `rowIndex`-th row of Pascal's triangle:

```python
from typing import List

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        row = [1]  # Start with the first row [1]
        
        for i in range(rowIndex):
            next_row = [1]  # First element of each row is always 1
            
            # Calculate the values for the current row
            for j in range(1, len(row)):
                next_row.append(row[j - 1] + row[j])
            
            next_row.append(1)  # Last element of each row is always 1
            row = next_row
        
        return row
```

This solution iteratively generates each row of Pascal's triangle. We start with the first row [1] and then for each subsequent row, we calculate the values by summing the corresponding elements from the previous row. Finally, we return the `rowIndex`-th row.

The space complexity of this solution is O(rowIndex) since we only store one row at a time.