To solve this problem, we can use a dynamic programming approach. We'll create an array `dp` to store the minimum number of days required to eat `i` oranges. We'll initialize `dp[0] = 0` since it takes 0 days to eat 0 oranges.

Then, for each `i` from 1 to `n`, we'll calculate the minimum number of days required to eat `i` oranges based on the three possible actions: eat 1 orange, eat `i/2` oranges if `i` is divisible by 2, and eat `2*(i/3)` oranges if `i` is divisible by 3. We'll take the minimum of these three values as the minimum number of days for `i`.

Here's the implementation of the `minDays` function:

```python
class Solution:
    def minDays(self, n: int) -> int:
        dp = [0] * (n + 1)  # Initialize dp array
        
        for i in range(1, n + 1):
            dp[i] = dp[i - 1] + 1  # Eat 1 orange
            
            if i % 2 == 0:
                dp[i] = min(dp[i], dp[i // 2] + 1)  # Eat i/2 oranges
            
            if i % 3 == 0:
                dp[i] = min(dp[i], dp[i // 3] + 1)  # Eat 2*(i/3) oranges
        
        return dp[n]
```

Now, you can create an instance of the `Solution` class and call the `minDays` function with the desired input to get the minimum number of days required to eat the oranges.

Example usage:
```python
solution = Solution()
print(solution.minDays(10))  # Output: 4
print(solution.minDays(6))   # Output: 3
```

This will give you the expected outputs as shown in the examples.