Here's the implementation of the `KthLargest` class in Python:

```python
import heapq

class KthLargest:
    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.heap = []
        for num in nums:
            self.add(num)

    def add(self, val: int) -> int:
        heapq.heappush(self.heap, val)
        if len(self.heap) > self.k:
            heapq.heappop(self.heap)
        return self.heap[0]
```

Explanation:
- The `KthLargest` class is initialized with `k` and `nums`.
- We maintain a heap (implemented as a list) to store the k largest elements.
- When initializing the object, we iterate over the `nums` list and add each element using the `add` method.
- In the `add` method, we add the new element to the heap using `heappush`. If the size of the heap exceeds `k`, we remove the smallest element using `heappop`.
- The `add` method returns the smallest element in the heap, which represents the kth largest element in the stream.

Example usage:
```python
kthLargest = KthLargest(3, [4, 5, 8, 2])
print(kthLargest.add(3))  # Output: 4
print(kthLargest.add(5))  # Output: 5
print(kthLargest.add(10)) # Output: 5
print(kthLargest.add(9))  # Output: 8
print(kthLargest.add(4))  # Output: 8
```

The `KthLargest` object is instantiated with `k = 3` and `nums = [4, 5, 8, 2]`. The `add` method is called for each subsequent element, and the output is printed accordingly.