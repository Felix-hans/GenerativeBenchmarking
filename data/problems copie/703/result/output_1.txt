Here's the implementation of the `KthLargest` class in Python:

```python
import heapq

class KthLargest:
    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.heap = []
        
        for num in nums:
            self.add(num)

    def add(self, val: int) -> int:
        heapq.heappush(self.heap, val)
        
        if len(self.heap) > self.k:
            heapq.heappop(self.heap)
        
        return self.heap[0]

# Test the implementation
kthLargest = KthLargest(3, [4, 5, 8, 2])
print(kthLargest.add(3))   # Output: 4
print(kthLargest.add(5))   # Output: 5
print(kthLargest.add(10))  # Output: 5
print(kthLargest.add(9))   # Output: 8
print(kthLargest.add(4))   # Output: 8
```

The `KthLargest` class maintains a min-heap (`self.heap`) of size `k`. The `__init__` method initializes the object by adding the initial elements from `nums` to the heap using the `add` method. The `add` method adds a new element to the heap and ensures that the heap size remains `k`. If the heap size exceeds `k`, the smallest element is removed using `heappop`. Finally, the `add` method returns the smallest element in the heap, which represents the k-th largest element in the stream.