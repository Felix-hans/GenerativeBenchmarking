Here's an implementation of the `KthLargest` class in Python:

```python
import heapq

class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.heap = []
        for num in nums:
            self.add(num)

    def add(self, val: int) -> int:
        heapq.heappush(self.heap, val)
        if len(self.heap) > self.k:
            heapq.heappop(self.heap)
        return self.heap[0]

# Test the implementation
kthLargest = KthLargest(3, [4, 5, 8, 2])
print(kthLargest.add(3))   # Output: 4
print(kthLargest.add(5))   # Output: 5
print(kthLargest.add(10))  # Output: 5
print(kthLargest.add(9))   # Output: 8
print(kthLargest.add(4))   # Output: 8
```

The `KthLargest` class uses a min-heap to maintain the `k` largest elements seen so far. In the constructor, we initialize the `k` value and create an empty heap. Then, we iterate through the `nums` list and add each element using the `add` method.

The `add` method adds the new element `val` to the heap. If the heap size exceeds `k`, we remove the smallest element from the heap using `heappop`. Finally, we return the smallest element from the heap, which represents the `k`th largest element in the stream.