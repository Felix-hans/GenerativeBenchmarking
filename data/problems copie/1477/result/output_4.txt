To solve this problem, we can use a sliding window approach. We'll maintain two windows: one starting from the left and the other starting from the right. We'll move these windows to find two non-overlapping subarrays with a sum equal to the target.

Here's the Python implementation of the solution:

```python
from typing import List

class Solution:
    def minSumOfLengths(self, arr: List[int], target: int) -> int:
        n = len(arr)
        prefix_sum = [0] * (n + 1)  # Prefix sum array
        left_window = [float('inf')] * (n + 1)  # Minimum length of subarray with target sum ending at each index from the left
        right_window = [float('inf')] * (n + 2)  # Minimum length of subarray with target sum starting at each index from the right

        # Calculate prefix sum
        for i in range(1, n + 1):
            prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]

        # Sliding window from left to right
        left_start = 0
        for right_end in range(1, n + 1):
            while prefix_sum[right_end] - prefix_sum[left_start] > target:
                left_start += 1
            if prefix_sum[right_end] - prefix_sum[left_start] == target:
                left_window[right_end] = right_end - left_start

        # Sliding window from right to left
        right_end = n
        for left_start in range(n, 0, -1):
            while prefix_sum[right_end] - prefix_sum[left_start - 1] > target:
                right_end -= 1
            if prefix_sum[right_end] - prefix_sum[left_start - 1] == target:
                right_window[left_start] = right_end - left_start + 1

        # Calculate the minimum sum of lengths
        min_length_sum = float('inf')
        for i in range(1, n + 1):
            min_length_sum = min(min_length_sum, left_window[i - 1] + right_window[i + 1])

        return min_length_sum if min_length_sum != float('inf') else -1
```

Let's test the solution with the provided examples:

```python
arr = [3, 2, 2, 4, 3]
target = 3
solution = Solution()
print(solution.minSumOfLengths(arr, target))  # Output: 2

arr = [7, 3, 4, 7]
target = 7
solution = Solution()
print(solution.minSumOfLengths(arr, target))  # Output: 2

arr = [4, 3, 2, 6, 2, 3, 4]
target = 6
solution = Solution()
print(solution.minSumOfLengths(arr, target))  # Output: -1
```

The solution should produce the expected outputs for the given examples.