You can solve the given task by using a dictionary to count the frequency of each number in the input array `nums`. Then, iterate over the numbers in the dictionary and check if the current number `num` and its adjacent number `num + 1` both exist in the dictionary. If they do, calculate the length of the harmonious subsequence by adding the frequencies of `num` and `num + 1`, and update the maximum length accordingly. Finally, return the maximum length found.

Here's the implementation of the `findLHS` method:

```python
from typing import List

class Solution:
    def findLHS(self, nums: List[int]) -> int:
        freq = {}
        for num in nums:
            freq[num] = freq.get(num, 0) + 1

        max_length = 0
        for num in freq:
            if num + 1 in freq:
                length = freq[num] + freq[num + 1]
                max_length = max(max_length, length)

        return max_length
```

You can create an instance of the `Solution` class and call the `findLHS` method with the input array `nums` to get the desired output. Here's an example usage:

```python
nums = [1, 3, 2, 2, 5, 2, 3, 7]
solution = Solution()
result = solution.findLHS(nums)
print(result)  # Output: 5
```

Similarly, you can try the other example inputs provided in the task description.