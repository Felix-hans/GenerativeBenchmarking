Here's the implementation of the `findLHS` function in Python to solve the given task:

```python
from typing import List

class Solution:
    def findLHS(self, nums: List[int]) -> int:
        num_counts = {}
        max_length = 0

        # Count the frequency of each number
        for num in nums:
            num_counts[num] = num_counts.get(num, 0) + 1

        # Check each number and its adjacent number
        for num in num_counts:
            if num + 1 in num_counts:
                length = num_counts[num] + num_counts[num + 1]
                max_length = max(max_length, length)

        return max_length
```

You can create an instance of the `Solution` class and call the `findLHS` function, passing in the `nums` list, to get the length of the longest harmonious subsequence. Here's an example usage:

```python
nums = [1, 3, 2, 2, 5, 2, 3, 7]
solution = Solution()
result = solution.findLHS(nums)
print(result)  # Output: 5
```

The `findLHS` function first creates a dictionary `num_counts` to count the frequency of each number in the input `nums` list. Then, it iterates over each number in `num_counts` and checks if the adjacent number (`num + 1`) is present in the dictionary. If so, it calculates the length of the harmonious subsequence by summing the frequencies of the two numbers and updates the `max_length` if necessary. Finally, it returns the `max_length` as the result.