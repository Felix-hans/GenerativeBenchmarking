Here's the implementation of the task in Python:

```python
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        triangle = []
        
        # Base case: if numRows is 0, return an empty triangle
        if numRows == 0:
            return triangle
        
        # First row is always [1]
        triangle.append([1])
        
        # Generate subsequent rows based on the previous row
        for i in range(1, numRows):
            # Get the previous row
            prev_row = triangle[i - 1]
            # Initialize the current row with [1]
            curr_row = [1]
            
            # Calculate the values for the current row
            for j in range(1, i):
                curr_row.append(prev_row[j - 1] + prev_row[j])
            
            # Add the final 1 to the current row
            curr_row.append(1)
            
            # Add the current row to the triangle
            triangle.append(curr_row)
        
        return triangle
```

You can create an instance of the `Solution` class and call the `generate` method with the desired `numRows` parameter to obtain the Pascal's triangle. For example:

```python
solution = Solution()
numRows = 5
pascals_triangle = solution.generate(numRows)
print(pascals_triangle)
```

Output:
```
[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
```

In this example, the `generate` method returns the first 5 rows of Pascal's triangle.