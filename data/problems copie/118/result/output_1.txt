Here's the implementation of the `generate` function that returns the first `numRows` of Pascal's triangle:

```python
from typing import List

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        triangle = []
        
        for i in range(numRows):
            row = [1] * (i + 1)
            if i > 1:
                for j in range(1, i):
                    row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
            triangle.append(row)
        
        return triangle
```

The `generate` function takes an integer `numRows` as input and returns a list of lists representing the Pascal's triangle with `numRows` rows. 

We start by initializing an empty list called `triangle` to store the triangle rows. 

Then, we iterate `i` from 0 to `numRows - 1` to generate each row of the triangle. Inside the loop, we create a new list called `row` and fill it with `1` values. The length of the row is `i + 1` because the row number `i` has `i + 1` elements.

For rows after the first row, we iterate `j` from 1 to `i - 1` (excluding the first and last elements) and update the values of `row` by summing the corresponding values from the previous row (`triangle[i - 1]`).

After generating a row, we append it to the `triangle` list.

Finally, we return the `triangle` list, which contains the first `numRows` rows of Pascal's triangle.

You can create an instance of the `Solution` class and call the `generate` method with your desired `numRows` value to get the corresponding Pascal's triangle. For example:

```python
solution = Solution()
result = solution.generate(5)
print(result)
```

Output:
```
[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
```

I hope this helps! Let me know if you have any further questions.