To solve the problem, we can use the binary search algorithm to find the kth smallest distance. Here's the implementation of the `smallestDistancePair` function:

```python
from typing import List

class Solution:
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()  # Sort the array in ascending order
        
        low = 0
        high = nums[-1] - nums[0]  # Maximum possible distance
        
        while low < high:
            mid = (low + high) // 2
            count = 0
            left = 0
            
            # Count the number of pairs with distance <= mid
            for right in range(len(nums)):
                while nums[right] - nums[left] > mid:
                    left += 1
                count += right - left
            
            if count < k:
                low = mid + 1
            else:
                high = mid
        
        return low
```

Let's test the function using the provided examples:

```python
solution = Solution()

# Example 1
nums = [1, 3, 1]
k = 1
print(solution.smallestDistancePair(nums, k))  # Output: 0

# Example 2
nums = [1, 1, 1]
k = 2
print(solution.smallestDistancePair(nums, k))  # Output: 0

# Example 3
nums = [1, 6, 1]
k = 3
print(solution.smallestDistancePair(nums, k))  # Output: 5
```

The output matches the expected results for the provided examples.