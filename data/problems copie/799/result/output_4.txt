To solve this problem, we can simulate the pouring of champagne into the glasses row by row. We'll keep track of the amount of champagne in each glass using a two-dimensional array.

Here's the Python implementation of the solution:

```python
class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        glasses = [[0] * (query_row + 1) for _ in range(query_row + 1)]
        glasses[0][0] = poured

        for i in range(query_row):
            for j in range(i + 1):
                overflow = (glasses[i][j] - 1) / 2
                if overflow > 0:
                    glasses[i + 1][j] += overflow
                    glasses[i + 1][j + 1] += overflow

        return min(1, glasses[query_row][query_glass])
```

Let's test the solution with the provided examples:

```python
solution = Solution()

# Example 1
poured = 1
query_row = 1
query_glass = 1
print(solution.champagneTower(poured, query_row, query_glass))  # Output: 0.0

# Example 2
poured = 2
query_row = 1
query_glass = 1
print(solution.champagneTower(poured, query_row, query_glass))  # Output: 0.5

# Example 3
poured = 100000009
query_row = 33
query_glass = 17
print(solution.champagneTower(poured, query_row, query_glass))  # Output: 1.0
```

The solution should provide the correct outputs for the given examples.