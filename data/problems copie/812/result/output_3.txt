To solve this problem, we can use the Shoelace formula, also known as the Gauss area formula, to calculate the area of a triangle given its three vertices. The formula states that the area of a triangle with vertices (x1, y1), (x2, y2), and (x3, y3) is equal to:

area = 0.5 * |x1(y2 - y3) + x2(y3 - y1) + x3(y1 - y2)|

We can iterate through all possible combinations of three points from the given array and calculate the area for each triangle. Finally, we return the maximum area found.

Here's the implementation of the `largestTriangleArea` function:

```python
from typing import List

class Solution:
    def largestTriangleArea(self, points: List[List[int]]) -> float:
        n = len(points)
        max_area = 0.0
        
        for i in range(n - 2):
            for j in range(i + 1, n - 1):
                for k in range(j + 1, n):
                    x1, y1 = points[i]
                    x2, y2 = points[j]
                    x3, y3 = points[k]
                    
                    area = 0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))
                    max_area = max(max_area, area)
        
        return max_area
```

Now you can create an instance of the `Solution` class and call the `largestTriangleArea` method, passing in the points as an argument. For example:

```python
points = [[0, 0], [0, 1], [1, 0], [0, 2], [2, 0]]
solution = Solution()
result = solution.largestTriangleArea(points)
print(result)
```

Output:
```
2.0
```

Note that this solution has a time complexity of O(n^3), where n is the number of points. Given the constraints of the problem, this approach should work efficiently.