Here's the implementation of the `countBits` function in Python that solves the given task:

```python
class Solution:
    def countBits(self, n: int) -> List[int]:
        bits = [0] * (n + 1)  # Initialize the result array with zeros
        
        for i in range(1, n + 1):
            # To count the number of set bits in 'i', we can use the count of set bits in 'i // 2' and add the least significant bit
            bits[i] = bits[i // 2] + (i % 2)
        
        return bits
```

The function `countBits` takes an integer `n` as input and returns an array `ans` of length `n + 1`, where `ans[i]` represents the number of 1's in the binary representation of `i`.

The algorithm works as follows:
1. Initialize the `bits` array with `n + 1` zeros. This array will store the count of set bits for each number.
2. Iterate over the range from 1 to `n + 1` (inclusive).
3. For each `i` in the range, calculate the count of set bits using the formula `bits[i] = bits[i // 2] + (i % 2)`.
   - `bits[i // 2]` represents the count of set bits in the number obtained by shifting `i` one position to the right.
   - `(i % 2)` gives the least significant bit of `i`, which is 1 if `i` is odd and 0 if `i` is even.
   - Adding these two values gives us the count of set bits in `i`.
4. Return the `bits` array as the final result.

This algorithm runs in linear time complexity O(n) and performs a single pass over the range from 1 to `n`. It does not use any built-in functions for counting set bits, providing a solution without relying on external libraries.