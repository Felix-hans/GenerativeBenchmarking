To solve the problem, we can use dynamic programming. We start by initializing an array `ans` with size `n+1` and set `ans[0]` to 0. Then, for each number `i` from 1 to `n`, we can calculate the number of 1's in its binary representation by using the formula `ans[i] = ans[i // 2] + i % 2`.

Here's the implementation of the `countBits` function in Python:

```python
class Solution:
    def countBits(self, n: int) -> List[int]:
        ans = [0] * (n + 1)
        
        for i in range(1, n + 1):
            ans[i] = ans[i // 2] + i % 2
        
        return ans
```

This solution has a linear runtime complexity of O(n) and completes the task in a single pass.

Note: The solution doesn't use any built-in functions like `__builtin_popcount` and calculates the count of 1's using the formula mentioned above.