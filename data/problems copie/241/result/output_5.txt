To solve this problem, we can use a recursive approach. We will iterate through the input expression and whenever we encounter an operator, we will split the expression into two parts: the left expression and the right expression. We will recursively compute all possible results for the left and right expressions and then combine them based on the operator.

Here's the Python code to implement this solution:

```python
from typing import List

class Solution:
    def diffWaysToCompute(self, expression: str) -> List[int]:
        if expression.isdigit():
            return [int(expression)]
        
        results = []
        for i in range(len(expression)):
            if expression[i] in ['+', '-', '*']:
                left_expr = expression[:i]
                right_expr = expression[i+1:]
                
                left_results = self.diffWaysToCompute(left_expr)
                right_results = self.diffWaysToCompute(right_expr)
                
                for left in left_results:
                    for right in right_results:
                        if expression[i] == '+':
                            results.append(left + right)
                        elif expression[i] == '-':
                            results.append(left - right)
                        elif expression[i] == '*':
                            results.append(left * right)
        
        return results
```

Let's test the code with the given examples:

```python
solution = Solution()

expression = "2-1-1"
print(solution.diffWaysToCompute(expression))
# Output: [0, 2]

expression = "2*3-4*5"
print(solution.diffWaysToCompute(expression))
# Output: [-34, -14, -10, -10, 10]
```

The code should produce the expected outputs for the given examples.