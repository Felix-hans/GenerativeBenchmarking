To check if string `s` is a subsequence of string `t`, we can use a two-pointer approach. Let's implement the `isSubsequence` function in Python:

```python
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        s_pointer = 0  # Pointer for string s
        t_pointer = 0  # Pointer for string t
        
        while s_pointer < len(s) and t_pointer < len(t):
            if s[s_pointer] == t[t_pointer]:
                s_pointer += 1  # Move s pointer forward
            t_pointer += 1  # Move t pointer forward
        
        # If s pointer reaches the end, it means all characters of s are found in t
        return s_pointer == len(s)
```

Now, let's test the function with the given examples:

```python
solution = Solution()

s = "abc"
t = "ahbgdc"
print(solution.isSubsequence(s, t))  # Output: True

s = "axc"
t = "ahbgdc"
print(solution.isSubsequence(s, t))  # Output: False
```

The function should return the expected results for the given examples.

For the follow-up scenario where there are lots of incoming strings `s1`, `s2`, ..., `sk`, and we want to check if `t` has each of them as subsequences, we can optimize the code by preprocessing string `t`. We can create a dictionary or a list of lists to store the indices of each character in `t`. This preprocessing step will take O(len(t)) time complexity. Then, for each incoming `s`, we can iterate over its characters and use the preprocessed information to determine if it is a subsequence of `t` in O(len(s)) time complexity.