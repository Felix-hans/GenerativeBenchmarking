To solve the problem, we can use a stack to keep track of the elements and their counts as we traverse the formula string. We'll also use a dictionary to store the counts of each element. Here's the implementation:

```python
class Solution:
    def countOfAtoms(self, formula: str) -> str:
        stack = []
        counts = {}
        i = 0

        while i < len(formula):
            if formula[i] == '(':
                stack.append(counts)
                counts = {}
                i += 1
            elif formula[i] == ')':
                curr_counts = counts
                counts = stack.pop()
                i += 1
                factor = 0
                while i < len(formula) and formula[i].isdigit():
                    factor = factor * 10 + int(formula[i])
                    i += 1
                factor = max(factor, 1)
                for element, count in curr_counts.items():
                    counts[element] = counts.get(element, 0) + count * factor
            else:
                start = i
                i += 1
                while i < len(formula) and formula[i].islower():
                    i += 1
                element = formula[start:i]
                count = 0
                while i < len(formula) and formula[i].isdigit():
                    count = count * 10 + int(formula[i])
                    i += 1
                count = max(count, 1)
                counts[element] = counts.get(element, 0) + count

        sorted_elements = sorted(counts.keys())
        result = ''
        for element in sorted_elements:
            result += element
            if counts[element] > 1:
                result += str(counts[element])
        return result
```

Let's test the solution with the given examples:

```python
solution = Solution()

# Example 1
formula = "H2O"
print(solution.countOfAtoms(formula))  # Output: "H2O"

# Example 2
formula = "Mg(OH)2"
print(solution.countOfAtoms(formula))  # Output: "H2MgO2"

# Example 3
formula = "K4(ON(SO3)2)2"
print(solution.countOfAtoms(formula))  # Output: "K4N2O14S4"
```

The output matches the expected results for the given examples.