Here's the implementation of the task in Python:

```python
class Solution:
    def numOfSubarrays(self, arr):
        MOD = 10**9 + 7
        odd_count = 0
        even_count = 1
        result = 0
        prefix_sum = 0
        
        for num in arr:
            prefix_sum += num
            
            if prefix_sum % 2 == 0:
                result += odd_count
                even_count += 1
            else:
                result += even_count
                odd_count += 1
            
            result %= MOD
        
        return result
```

You can use the `numOfSubarrays` method of the `Solution` class to find the number of subarrays with an odd sum. For example:

```python
arr = [1, 3, 5]
solution = Solution()
result = solution.numOfSubarrays(arr)
print(result)  # Output: 4
```

The solution uses two variables `odd_count` and `even_count` to keep track of the number of subarrays ending at the current position with odd and even sums, respectively. The `result` variable stores the total count of subarrays with an odd sum. The `prefix_sum` variable is used to calculate the prefix sum of the array elements. The solution iterates over the array, updates the counts and the result accordingly, and returns the result modulo `10^9 + 7` to handle large outputs.