To solve this task, we can use a sliding window approach to find all substrings that contain at least one occurrence of the characters 'a', 'b', and 'c'.

Here's the implementation of the `numberOfSubstrings` function:

```python
class Solution:
    def numberOfSubstrings(self, s: str) -> int:
        count = 0  # Number of valid substrings
        freq = {char: 0 for char in 'abc'}  # Frequency count of 'a', 'b', and 'c'
        left = 0  # Left pointer of the sliding window

        for right in range(len(s)):
            freq[s[right]] += 1  # Increment the frequency count of the current character

            # If the window contains at least one occurrence of 'a', 'b', and 'c'
            while all(freq.values()):
                count += len(s) - right  # Add the number of valid substrings ending at the current position
                freq[s[left]] -= 1  # Decrement the frequency count of the left character
                left += 1  # Move the left pointer to the right

        return count
```

Let's test the function with the provided examples:

```python
solution = Solution()

s = "abcabc"
print(solution.numberOfSubstrings(s))  # Output: 10

s = "aaacb"
print(solution.numberOfSubstrings(s))  # Output: 3

s = "abc"
print(solution.numberOfSubstrings(s))  # Output: 1
```

The function returns the expected outputs for the given examples.