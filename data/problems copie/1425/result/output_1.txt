To solve this problem, we can use dynamic programming. We'll create an array `dp` of the same length as `nums` to store the maximum subsequence sum ending at each index.

The recurrence relation is as follows:
`dp[i] = max(nums[i], nums[i] + max(dp[i-k], dp[i-k+1], ..., dp[i-1]))`

Here's the implementation of the `constrainedSubsetSum` function:

```python
class Solution:
    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:
        n = len(nums)
        dp = [0] * n
        dp[0] = nums[0]
        max_sum = dp[0]

        for i in range(1, n):
            max_prev = max(dp[max(0, i-k):i])
            dp[i] = max(nums[i], nums[i] + max_prev)
            max_sum = max(max_sum, dp[i])

        return max_sum
```

Let's test the function with the given examples:

```python
solution = Solution()

nums = [10, 2, -10, 5, 20]
k = 2
print(solution.constrainedSubsetSum(nums, k))  # Output: 37

nums = [-1, -2, -3]
k = 1
print(solution.constrainedSubsetSum(nums, k))  # Output: -1

nums = [10, -2, -10, -5, 20]
k = 2
print(solution.constrainedSubsetSum(nums, k))  # Output: 23
```

The function returns the expected outputs for the given examples.