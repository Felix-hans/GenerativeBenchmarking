To solve this problem, we can use dynamic programming to keep track of the maximum number of stones Alice can get at each step. Let's define a recursive function `stoneGameHelper` that takes three parameters: the current index `idx`, the current value of `M`, and a memoization table `memo` to store the computed results.

Here's the Python code that solves the problem:

```python
from typing import List

class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        n = len(piles)
        memo = {}  # memoization table
        
        # Recursive helper function
        def stoneGameHelper(idx: int, M: int) -> int:
            if idx >= n:
                return 0
            
            # Check if the result is already memoized
            if (idx, M) in memo:
                return memo[(idx, M)]
            
            max_stones = float('-inf')
            stones = 0
            for x in range(1, min(2*M + 1, n - idx + 1)):
                stones += piles[idx + x - 1]
                opponent_stones = stoneGameHelper(idx + x, max(M, x))
                max_stones = max(max_stones, stones - opponent_stones)
            
            # Memoize the result
            memo[(idx, M)] = max_stones
            return max_stones
        
        return stoneGameHelper(0, 1)
```

Now, let's test the code with the given examples:

```python
solution = Solution()
piles = [2, 7, 9, 4, 4]
print(solution.stoneGameII(piles))  # Output: 10

piles = [1, 2, 3, 4, 5, 100]
print(solution.stoneGameII(piles))  # Output: 104
```

The code will output the maximum number of stones Alice can get in each example.