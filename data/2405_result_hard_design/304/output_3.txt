To implement the given task in Python, you can define the `NumMatrix` class and implement the `__init__` and `sumRegion` methods. Here's the code:

```python
class NumMatrix:
    def __init__(self, matrix):
        self.matrix = matrix
        m = len(matrix)
        n = len(matrix[0]) if matrix else 0
        self.dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                self.dp[i][j] = (
                    self.dp[i - 1][j] + self.dp[i][j - 1] - self.dp[i - 1][j - 1] +
                    matrix[i - 1][j - 1]
                )
    
    def sumRegion(self, row1, col1, row2, col2):
        return (
            self.dp[row2 + 1][col2 + 1] -
            self.dp[row1][col2 + 1] -
            self.dp[row2 + 1][col1] +
            self.dp[row1][col1]
        )
```

This implementation uses dynamic programming to precompute the sum of submatrices. The `dp` matrix is used to store the cumulative sum up to each cell. Then, when `sumRegion` is called, it computes the sum of the submatrix using the precomputed values in constant time complexity.

Here's an example of how you can use the `NumMatrix` class:

```python
matrix = [
    [3, 0, 1, 4, 2],
    [5, 6, 3, 2, 1],
    [1, 2, 0, 1, 5],
    [4, 1, 0, 1, 7],
    [1, 0, 3, 0, 5]
]

obj = NumMatrix(matrix)
print(obj.sumRegion(2, 1, 4, 3))  # Output: 8
print(obj.sumRegion(1, 1, 2, 2))  # Output: 11
print(obj.sumRegion(1, 2, 2, 4))  # Output: 12
```

The code initializes a `NumMatrix` object with the given `matrix` and then calls the `sumRegion` method with different query parameters, printing the results.