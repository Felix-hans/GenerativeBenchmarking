To implement the NumMatrix class and the required methods, we can use the concept of prefix sums. The idea is to precompute the sum of elements for each cell in the matrix, considering the rectangle defined by the upper left corner (0, 0) and the current cell.

Here's the implementation in Python:

```python
class NumMatrix:
    def __init__(self, matrix):
        if not matrix or not matrix[0]:
            self.prefix_sums = None
        else:
            m, n = len(matrix), len(matrix[0])
            self.prefix_sums = [[0] * (n + 1) for _ in range(m + 1)]

            # Compute prefix sums
            for i in range(1, m + 1):
                for j in range(1, n + 1):
                    self.prefix_sums[i][j] = (
                        matrix[i - 1][j - 1]
                        + self.prefix_sums[i - 1][j]
                        + self.prefix_sums[i][j - 1]
                        - self.prefix_sums[i - 1][j - 1]
                    )

    def sumRegion(self, row1, col1, row2, col2):
        if self.prefix_sums is None:
            return 0

        # Add the sum of the rectangle with the prefix sums technique
        return (
            self.prefix_sums[row2 + 1][col2 + 1]
            - self.prefix_sums[row1][col2 + 1]
            - self.prefix_sums[row2 + 1][col1]
            + self.prefix_sums[row1][col1]
        )
```

Now you can create a `NumMatrix` object and call the `sumRegion` method to get the sum of elements in a given rectangle.

Example usage:
```python
matrix = [
    [3, 0, 1, 4, 2],
    [5, 6, 3, 2, 1],
    [1, 2, 0, 1, 5],
    [4, 1, 0, 1, 7],
    [1, 0, 3, 0, 5]
]

obj = NumMatrix(matrix)
print(obj.sumRegion(2, 1, 4, 3))  # Output: 8
print(obj.sumRegion(1, 1, 2, 2))  # Output: 11
print(obj.sumRegion(1, 2, 2, 4))  # Output: 12
```

The time complexity of the `NumMatrix` initialization is O(m*n), where m and n are the dimensions of the matrix. The `sumRegion` method works in O(1) time complexity since the sums of the rectangles are precomputed using the prefix sums technique.