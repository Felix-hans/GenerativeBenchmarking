To implement the NumMatrix class, we can use the concept of prefix sums. The idea is to precompute a prefix sum matrix where each element represents the sum of all elements above and to the left of the corresponding element in the original matrix.

Here's the implementation:

```python
class NumMatrix:
    def __init__(self, matrix):
        if not matrix:
            return

        m, n = len(matrix), len(matrix[0])
        self.prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                self.prefix_sum[i][j] = (
                    matrix[i - 1][j - 1]
                    + self.prefix_sum[i - 1][j]
                    + self.prefix_sum[i][j - 1]
                    - self.prefix_sum[i - 1][j - 1]
                )

    def sumRegion(self, row1, col1, row2, col2):
        return (
            self.prefix_sum[row2 + 1][col2 + 1]
            - self.prefix_sum[row2 + 1][col1]
            - self.prefix_sum[row1][col2 + 1]
            + self.prefix_sum[row1][col1]
        )
```

In the constructor (`__init__`), we initialize the `prefix_sum` matrix with dimensions `(m + 1) x (n + 1)`. We use `(m + 1)` and `(n + 1)` to handle the boundary cases conveniently.

Next, we populate the `prefix_sum` matrix by iterating over the original matrix. For each element, we compute the sum of all elements above and to the left of it by using the formula:

```
prefix_sum[i][j] = matrix[i - 1][j - 1]
                  + prefix_sum[i - 1][j]
                  + prefix_sum[i][j - 1]
                  - prefix_sum[i - 1][j - 1]
```

In the `sumRegion` method, we use the prefix sum matrix to calculate the sum of elements in the given rectangle. We use the formula:

```
sumRegion = prefix_sum[row2 + 1][col2 + 1]
            - prefix_sum[row2 + 1][col1]
            - prefix_sum[row1][col2 + 1]
            + prefix_sum[row1][col1]
```

This formula uses the inclusion-exclusion principle to subtract the sum of elements outside the given rectangle.

With this implementation, the `sumRegion` method has a time complexity of O(1) since it performs a constant number of operations regardless of the size of the matrix.