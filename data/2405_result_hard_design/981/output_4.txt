Here's the Python implementation of the TimeMap class:

```python
from collections import defaultdict

class TimeMap:

    def __init__(self):
        self.data = defaultdict(list)

    def set(self, key: str, value: str, timestamp: int) -> None:
        self.data[key].append((timestamp, value))

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.data:
            return ""

        values = self.data[key]
        left, right = 0, len(values) - 1

        while left <= right:
            mid = (left + right) // 2
            if values[mid][0] == timestamp:
                return values[mid][1]
            elif values[mid][0] < timestamp:
                left = mid + 1
            else:
                right = mid - 1

        if right >= 0:
            return values[right][1]
        else:
            return ""
```

The `TimeMap` class uses a dictionary (`self.data`) to store the key-value pairs, where the values are stored as a list of tuples. Each tuple consists of a timestamp and the corresponding value.

The `set` method appends a new tuple to the list of values associated with the given key.

The `get` method performs a binary search on the list of values for the given key. It looks for the largest timestamp less than or equal to the target timestamp and returns the corresponding value. If no such value is found, it returns an empty string.

You can instantiate a `TimeMap` object and call the `set` and `get` methods as shown in the example usage provided.